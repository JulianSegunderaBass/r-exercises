lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle("Violent Crimes by Population") + scale_x_log10()
}
per.capita.scatterplot(county.data$violent.crimes, county.data$population)
# fill in
per.capita.scatterplot = function(x, n) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle("Violent Crimes by Population") + scale_x_log10()
}
per.capita.scatterplot(county.data$violent.crimes, county.data$population)
per.capita.scatterplot(county.data$births, county.data$population)
# fill in
per.capita.scatterplot = function(x, n, main.title) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle("Violent Crimes by Population") + scale_x_log10()
}
per.capita.scatterplot(county.data$violent.crimes, county.data$population, "Test")
per.capita.scatterplot(county.data$births, county.data$population, "Test 2")
per.capita.scatterplot(county.data$deaths, county.data$population, "Test 3")
per.capita.scatterplot(county.data$infant.deaths, county.data$population, "Test 4")
# fill in
per.capita.scatterplot = function(x, n, main.title) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle(main.title) + scale_x_log10()
}
per.capita.scatterplot(county.data$violent.crimes, county.data$population, "Test")
per.capita.scatterplot(county.data$births, county.data$population, "Test 2")
per.capita.scatterplot(county.data$deaths, county.data$population, "Test 3")
per.capita.scatterplot(county.data$infant.deaths, county.data$population, "Test 4")
# fill in
per.capita.scatterplot = function(x, n, main.title) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle(main.title) + scale_x_log10()
}
per.capita.scatterplot(county.data$violent.crimes, county.data$population, "Violent Crimes by Population")
per.capita.scatterplot(county.data$births, county.data$population, "Births by Population")
per.capita.scatterplot(county.data$deaths, county.data$population, "Deaths by Population")
per.capita.scatterplot(county.data$infant.deaths, county.data$population, "Infant Deaths by Population")
setwd("~/Julian Bass_College Works APC/Study From Home/anaLytic3/R/r-github/homework-3")
library(ggplot2)
library(plyr)
library(reshape2)
library(knitr)
library(binom)
county.data = read.csv(file = 'county_data.csv', header=TRUE)
load('county_ggplot.rda')
# fill in
per.capita.scatterplot = function(x, n, main.title) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle(main.title) + scale_x_log10()
}
per.capita.scatterplot(county.data$violent.crimes, county.data$population, "Violent Crimes by Population")
per.capita.scatterplot(county.data$births, county.data$population, "Births by Population")
per.capita.scatterplot(county.data$deaths, county.data$population, "Deaths by Population")
per.capita.scatterplot(county.data$infant.deaths, county.data$population, "Infant Deaths by Population")
# fill in
find.std.residual = function(data, column, null.prob) {
null.prob = null.prob / 100
data = mutate(data, expected.null = column * null.prob,
std.dev.null = sqrt(expected.null * (1 - null.prob)),
residual = county.data$violent.crimes - expected.null,
std.residual = residual / std.dev.null)
ordered = data[order(-data$std.residual), ]
return (ordered)
}
find.std.residual(county.data, county.data$population, 1)
# fill in
top.15.crimes = find.std.residual(county.data, county.data$violent.crimes, 1)
top.15.crimes = top.15.crimes[order(-top.15.crimes$violent.crimes)[1:15], ]
top.15.crimes
# fill in
map.std.residual = function(county.gg, county.data) {
map.rate = with(county.data, sum(violent.crimes) / sum(population))
county.mapdata = merge(county.gg, county.data, by.x = 'fips', by.y='STCOU')
county.mapdata = arrange(county.mapdata, order)
ggplot(data = county.mapdata, mapping = aes(x = long, y = lat, group = group, fill = violent.crimes)) +
geom_polygon() +
coord_map() +
labs(fill = 'Violent Crime Rate', title='Violent Crimes') +
coord_map() +
scale_fill_gradient2(low = 'grey', high = 'red', mid = 'grey', midpoint = map.rate)
}
map.std.residual(county.gg, top.15.crimes)
# fill in
map.std.residual(county.gg, find.std.residual(county.data, county.data$violent.crimes, 20))
# fill in
overall.rate = sum(county.data$violent.crimes) / sum(county.data$population)
map.std.residual(county.gg, find.std.residual(top.15.crimes, top.15.crimes$violent.crimes, overall.rate))
library(ggplot2)
library(plyr)
library(reshape2)
library(knitr)
library(binom)
county.data = read.csv(file = 'county_data.csv', header=TRUE)
load('county_ggplot.rda')
# fill in
per.capita.scatterplot = function(x, n, main.title) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle(main.title) + scale_x_log10()
}
per.capita.scatterplot(county.data$violent.crimes, county.data$population, "Violent Crimes by Population")
per.capita.scatterplot(county.data$births, county.data$population, "Births by Population")
per.capita.scatterplot(county.data$deaths, county.data$population, "Deaths by Population")
per.capita.scatterplot(county.data$infant.deaths, county.data$population, "Infant Deaths by Population")
# fill in
find.std.residual = function(data, column, null.prob) {
null.prob = null.prob / 100
data = mutate(data, expected.null = column * null.prob,
std.dev.null = sqrt(expected.null * (1 - null.prob)),
residual = county.data$violent.crimes - expected.null,
std.residual = residual / std.dev.null)
ordered = data[order(-data$std.residual), ]
return (ordered)
}
find.std.residual(county.data, county.data$population, 1)
# fill in
find.std.residual = function(data, column, null.prob) {
data = mutate(data, expected.null = column * null.prob,
std.dev.null = sqrt(expected.null * (1 - null.prob)),
residual = county.data$violent.crimes - expected.null,
std.residual = residual / std.dev.null)
ordered = data[order(-data$std.residual), ]
return (ordered)
}
find.std.residual(county.data, county.data$population, 1)
# fill in
find.std.residual = function(data, column, null.prob) {
data = mutate(data, expected.null = column * null.prob,
std.dev.null = sqrt(expected.null * (1 - null.prob)),
residual = county.data$violent.crimes - expected.null,
std.residual = residual / std.dev.null)
ordered = data[order(-data$std.residual), ]
return (ordered)
}
# fill in
top.15.crimes = find.std.residual(county.data, county.data$violent.crimes, 1)
top.15.crimes = top.15.crimes[order(-top.15.crimes$violent.crimes)[1:15], ]
top.15.crimes
# fill in
find.std.residual = function(data, column, null.prob) {
null.prob = null.prob / 100
data = mutate(data, expected.null = column * null.prob,
std.dev.null = sqrt(expected.null * (1 - null.prob)),
residual = county.data$violent.crimes - expected.null,
std.residual = residual / std.dev.null)
ordered = data[order(-data$std.residual), ]
return (ordered)
}
# fill in
top.15.crimes = find.std.residual(county.data, county.data$violent.crimes, 1)
top.15.crimes = top.15.crimes[order(-top.15.crimes$violent.crimes)[1:15], ]
top.15.crimes
# fill in
map.std.residual = function(county.gg, county.data) {
map.rate = with(county.data, sum(violent.crimes) / sum(population))
county.mapdata = merge(county.gg, county.data, by.x = 'fips', by.y='STCOU')
county.mapdata = arrange(county.mapdata, order)
ggplot(data = county.mapdata, mapping = aes(x = long, y = lat, group = group, fill = violent.crimes)) +
geom_polygon() +
coord_map() +
labs(fill = 'Violent Crime Rate', title='Violent Crimes') +
coord_map() +
scale_fill_gradient2(low = 'grey', high = 'red', mid = 'grey', midpoint = map.rate)
}
map.std.residual(county.gg, top.15.crimes)
# fill in
overall.rate = sum(county.data$violent.crimes) / sum(county.data$population)
map.std.residual(county.gg, find.std.residual(county.data, county.data$violent.crimes, overall.rate))
# fill in
per.capita.scatterplot = function(x, n, main.title) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x="Population", y=per.capita)) + geom_point() + geom_smooth() + ggtitle(main.title) +  scale_x_log10()
}
per.capita.scatterplot(county.data$violent.crimes, county.data$population, "Violent Crimes by Population")
# fill in
per.capita.scatterplot = function(x, n, main.title) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle(main.title) +  scale_x_log10()
}
per.capita.scatterplot(county.data$violent.crimes, county.data$population, "Violent Crimes by Population")
per.capita.scatterplot(county.data$births, county.data$population, "Births by Population")
per.capita.scatterplot(county.data$deaths, county.data$population, "Deaths by Population")
per.capita.scatterplot(county.data$infant.deaths, county.data$population, "Infant Deaths by Population")
# fill in
per.capita.scatterplot = function(x, n, main.title) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita), xlab="Population") + geom_point() + geom_smooth() + ggtitle(main.title) +  scale_x_log10()
}
per.capita.scatterplot(county.data$violent.crimes, county.data$population, "Violent Crimes by Population")
per.capita.scatterplot(county.data$births, county.data$population, "Births by Population")
per.capita.scatterplot(county.data$deaths, county.data$population, "Deaths by Population")
per.capita.scatterplot(county.data$infant.deaths, county.data$population, "Infant Deaths by Population")
library(ggplot2)
library(plyr)
library(reshape2)
library(knitr)
library(binom)
county.data = read.csv(file = 'county_data.csv', header=TRUE)
load('county_ggplot.rda')
# fill in
# Scatterplot function that takes in a per capita column value, a function (in this case population) and a plot title
per.capita.scatterplot = function(x, n, main.title) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle(main.title) +  scale_x_log10()
}
# Violent Crimes by Population
per.capita.scatterplot(county.data$violent.crimes, county.data$population, "Violent Crimes by Population")
# Births by Population
per.capita.scatterplot(county.data$births, county.data$population, "Births by Population")
# Deaths by Population
per.capita.scatterplot(county.data$deaths, county.data$population, "Deaths by Population")
# Infant Deaths by Population
per.capita.scatterplot(county.data$infant.deaths, county.data$population, "Infant Deaths by Population")
# fill in
find.std.residual = function(data, variable, null.prob) {
null.prob = null.prob / 100
data = mutate(data, expected.null = variable * null.prob,
std.dev.null = sqrt(expected.null * (1 - null.prob)),
residual = county.data$violent.crimes - expected.null,
std.residual = residual / std.dev.null)
# Decreasing order data by std.residual
ordered = data[order(-data$std.residual), ]
return (ordered)
}
# fill in
# Initial function call
top.15.crimes = find.std.residual(county.data, county.data$violent.crimes, 1)
# Retrieving only the top 15 records in decreasing crime rate order
top.15.crimes = top.15.crimes[order(-top.15.crimes$violent.crimes)[1:15], ]
top.15.crimes
# fill in
# Code taken from Exercise 6 solution
map.std.residual = function(county.gg, county.data) {
map.rate = with(county.data, sum(violent.crimes) / sum(population))
county.mapdata = merge(county.gg, county.data, by.x = 'fips', by.y='STCOU')
county.mapdata = arrange(county.mapdata, order)
ggplot(data = county.mapdata, mapping = aes(x = long, y = lat, group = group, fill = violent.crimes)) +
geom_polygon() +
coord_map() +
labs(fill = 'Violent Crime Rate', title='Violent Crimes') +
coord_map() +
scale_fill_gradient2(low = 'grey', high = 'red', mid = 'grey', midpoint = map.rate)
}
# Calling the mapping function with the top 15 crimes
map.std.residual(county.gg, top.15.crimes)
# fill in
# Getting the Violent Crime per Capita Rate
crime.rate = sum(county.data$violent.crimes) / sum(county.data$population)
# Passing the crime rate as the null hypothesis
map.std.residual(county.gg, find.std.residual(county.data, county.data$violent.crimes, crime.rate))
setwd("~/Julian Bass_College Works APC/Study From Home/anaLytic3/R/r-github/homework-4")
library(plyr)
library(ggplot2)
library(reshape2)
expenditures = read.csv(file = 'dataset_hw4.csv', header = TRUE)
View(expenditures)
# fill in
# apartments subset
apartments = subset(expenditures, home.type == "apartment or flat" | home.type = "high-rise")
# fill in
# apartments subset
apartments = subset(expenditures, home.type == "apartment or flat" | home.type == "high-rise")
apartments
# fill in
# apartments subset
apartments = subset(expenditures, home.type == "apartment or flat" | home.type == "high-rise")
# homes subset
homes = subset(expenditures, home.type == "single family detached")
p<-qplot(sample = food, data = apartments, color=home.type)
p
# fill in
# apartments subset
apartments = subset(expenditures, home.type == "apartment or flat" | home.type == "high-rise")
# homes subset
homes = subset(expenditures, home.type == "single family detached")
qplot(data = apartments, color=home.type)
# fill in
# apartments subset
apartments = subset(expenditures, home.type == "apartment or flat" | home.type == "high-rise")
# homes subset
homes = subset(expenditures, home.type == "single family detached")
qplot(sample = food, data = apartments, color=home.type)
# fill in
# apartments subset
apartments = subset(expenditures, home.type == "apartment or flat" | home.type == "high-rise")
# homes subset
homes = subset(expenditures, home.type == "single family detached")
qplot(sample = food, data = apartments, color=home.type)
qplot(sample = food, data = homes, color=home.type)
# fill in
# apartments subset
apartments = subset(expenditures, home.type == "apartment or flat" | home.type == "high-rise")
# homes subset
homes = subset(expenditures, home.type == "single family detached")
#qplot(sample = food, data = apartments, color=home.type)
#qplot(sample = food, data = homes, color=home.type)
qplot(sample = food, data = expenditures, color=home.type)
# fill in
# apartments subset
apartments = subset(expenditures, home.type == "apartment or flat" | home.type == "high-rise")
# homes subset
homes = subset(expenditures, home.type == "single family detached")
#qplot(sample = food, data = apartments, color=home.type)
#qplot(sample = food, data = homes, color=home.type)
qplot(sample = food, data = expenditures, color=home.type) + facet_wrap(~ home.type)
# fill in
# apartments subset
apartments.and.homes = subset(expenditures, home.type == "apartment or flat" | home.type == "high-rise" | home.type == "single family detached")
# homes subset
# homes = subset(expenditures, home.type == "single family detached")
#qplot(sample = food, data = apartments, color=home.type)
#qplot(sample = food, data = homes, color=home.type)
qplot(sample = food, data = apartments.and.homes, color=home.type) + facet_wrap(~ home.type)
# fill in
# Subset for home categories
apartments.and.homes = subset(expenditures, home.type == "apartment or flat" | home.type == "high-rise" | home.type == "single family detached")
qplot(sample = food, data = apartments.and.homes, color=home.type) + facet_wrap(~ home.type)
# fill in
# Subset for home categories
apartments.and.homes = subset(expenditures, home.type == "apartment or flat" | home.type == "high-rise" | home.type == "single family detached")
qplot(x = food, data = apartments.and.homes, color=home.type) + facet_wrap(~ home.type)
# fill in
# Subset for home categories
apartments.and.homes = subset(expenditures, home.type == "apartment or flat" | home.type == "high-rise" | home.type == "single family detached")
qplot(y = food, data = apartments.and.homes, color=home.type) + facet_wrap(~ home.type)
# fill in
# Subset for home categories
apartments.and.homes = subset(expenditures, home.type == "apartment or flat" | home.type == "high-rise" | home.type == "single family detached")
qplot(sample = food, data = apartments.and.homes, color=home.type) + facet_wrap(~ home.type)
View(expenditures)
# fill in
# Subset for home categories
apartments.and.homes = subset(expenditures, home.type == "apartment or flat" | home.type == "high-rise" | home.type == "single family detached")
qplot(sample = housing, data = apartments.and.homes, color=home.type) + facet_wrap(~ home.type)
# fill in
# Subset for home categories
apartments.and.homes = subset(expenditures, home.type == "apartment or flat" | home.type == "high-rise" | home.type == "single family detached")
qplot(sample = housing, data = apartments.and.homes, color=home.type) + facet_wrap(~ housing > 1000)
# fill in
# Subset for home categories
apartments.and.homes = subset(expenditures, home.type == "apartment or flat" | home.type == "high-rise" | home.type == "single family detached")
qplot(sample = housing, data = apartments.and.homes, color=home.type) + facet_wrap(~ home.type)
# fill in
qplot(sample = housing, data = apartments.and.homes, color=home.type) + scale_x_log10() + facet_wrap(~ housing)
# fill in
qplot(sample = housing, data = apartments.and.homes, color=home.type) + + facet_wrap(~ housing)
# fill in
qplot(sample = housing, data = apartments.and.homes, color=home.type) + facet_wrap(~ housing)
# fill in
qplot(sample = housing, data = apartments.and.homes, color=home.type) + facet_wrap(~ housing > 5000)
# fill in
qplot(sample = housing, data = apartments.and.homes, color=home.type) + facet_wrap(~ housing > 5000 +  home.type)
# fill in
qplot(sample = housing, data = apartments.and.homes, color=home.type) + facet_wrap(~ (housing > 5000) +  home.type)
# fill in
qplot(sample = housing, data = apartments.and.homes, color=home.type)
+ facet_wrap(~ home.type + (housing > 5000))
# fill in
qplot(sample = housing, data = apartments.and.homes, color=home.type) +
facet_wrap(~ home.type + (housing > 5000))
# fill in
qplot(sample = housing, data = apartments.and.homes, color=home.type) +
facet_wrap(~ (housing > 5000) + home.type)
# fill in
#qplot(sample = housing, data = apartments.and.homes, color=home.type) +
#facet_wrap(~ (housing > 5000) + home.type)
home_count <- filter(expenditures, home.type%in%c("apartment or flat", "high-rise", "single family detached")) %>%
mutate(home.type = factor(home.type, levels = c("apartment or flat", "high-rise", "single family detached")))
# fill in
#qplot(sample = housing, data = apartments.and.homes, color=home.type) +
#facet_wrap(~ (housing > 5000) + home.type)
home_count <- filter(apartments.and.homes) +
mutate(home.type = factor(home.type, levels = c("apartment or flat", "high-rise", "single family detached")))
# fill in
#qplot(sample = housing, data = apartments.and.homes, color=home.type) +
#facet_wrap(~ (housing > 5000) + home.type)
ggplot(data = apartments.and.homes) +
geom_line(size = 1) +
geom_point() +
labs(title = "New Marvel characters by gender",
subtitle = "(limited to characters with more than 100 appearances)",
y = "Count of new characters", x = "")
# fill in
qplot(sample = housing, data = apartments.and.homes, color=home.type) +
facet_wrap(~ (housing > 5000) + home.type)
# fill in
qplot(sample = housing, data = apartments.and.homes, color=home.type) +
facet_wrap(~ (housing > 5000) + home.type, nrow = 2)
# fill in
qplot(sample = housing, data = apartments.and.homes, color=home.type) +
facet_wrap(~ (housing > 5000) + home.type, nrow = 6)
# fill in
qplot(sample = housing, data = apartments.and.homes, color=home.type) +
facet_wrap(~ (housing > 5000) + home.type, nrow = 3)
# fill in
qplot(sample = housing, data = apartments.and.homes, color=home.type) +
facet_wrap(~ (housing > 5000) + home.type)
# fill in
library(ggplot2movies)
# fill in
library(ggplot2movies)
movies
# fill in
library(ggplot2movies)
qplot(sample = rating, data = movies, color=rating) +
facet_wrap(~ (rating > 3.0))
# fill in
library(ggplot2movies)
#qplot(sample = rating, data = movies, color=rating) +
#facet_wrap(~ (rating > 3.0))
ggplot(movies, mapping = aes(x = year, y = rating)) + stat_summary(fun.data = mean_cl_boot, geom = "pointrange", color = "blue")
# fill in
library(ggplot2movies)
#qplot(sample = rating, data = movies, color=rating) +
#facet_wrap(~ (rating > 3.0))
ggplot(movies, mapping = aes(x = year, y = rating))
# fill in
library(ggplot2movies)
#qplot(sample = rating, data = movies, color=rating) +
#facet_wrap(~ (rating > 3.0))
ggplot(movies, mapping = aes(x = year, y = rating)) + stat_summary(fun.data = mean_cl_boot, geom = "pointrange", color = "blue") + facet_wrap(~ rating > 5)
# fill in
library(ggplot2movies)
#qplot(sample = rating, data = movies, color=rating) +
#facet_wrap(~ (rating > 3.0))
ggplot(movies, mapping = aes(x = year, y = rating)) + facet_wrap(~ rating > 5)
# fill in
library(ggplot2movies)
#qplot(sample = rating, data = movies, color=rating) +
#facet_wrap(~ (rating > 3.0))
help(movies)
# fill in
library(ggplot2movies)
#qplot(sample = rating, data = movies, color=rating) +
#facet_wrap(~ (rating > 3.0))
movie =
filter(!is.na(title)) +
arrange(desc(rating))
# fill in
library(ggplot2movies)
#qplot(sample = rating, data = movies, color=rating) +
#facet_wrap(~ (rating > 3.0))
movie =
filter(!is.na(title)), arrange(desc(rating))
# fill in
library(ggplot2movies)
#qplot(sample = rating, data = movies, color=rating) +
#facet_wrap(~ (rating > 3.0))
movie = filter(!is.na(title)) + arrange(desc(rating))
# fill in
library(ggplot2movies)
#qplot(sample = rating, data = movies, color=rating) +
#facet_wrap(~ (rating > 3.0))
movie = filter(!is.na(title))
# fill in
library(ggplot2movies)
#qplot(sample = rating, data = movies, color=rating) +
#facet_wrap(~ (rating > 3.0))
movies = filter(!is.na(title))
# fill in
library(ggplot2movies)
#qplot(sample = rating, data = movies, color=rating) +
#facet_wrap(~ (rating > 3.0))
filtered.movies = movies[ complete.cases(movies), ]
View(filtered.movies)
# fill in
library(ggplot2movies)
#qplot(sample = rating, data = movies, color=rating) +
#facet_wrap(~ (rating > 3.0))
movie.count = count(movies, year)
View(filtered.movies)

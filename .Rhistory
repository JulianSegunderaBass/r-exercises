ggplot(data=scores.ratios.melt, mapping=aes(x = variable, y=value, color=variable)) +
geom_violin() +
geom_point(position=position_jitter(width=.3), size=.6) +
theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1)) +
scale_color_discrete(guide=FALSE) +
labs(x = 'Variables', y='Values', title='Ratio Variable Values by Melting') +
stat_summary(fun.y=median, geom="point", size=2, color="red")
ggplot(variable.averages, aes(x=avg.ratio, y=variable)) +
geom_bar(stat="identity") +
labs(x = 'Average Values', y='Variables', title='Average Values per Variable')
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
View(scores.demographics.melt)
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
ggplot(scores.demographics.melt, aes(Score, value, color = variable)) +
geom_point() +
stat_smooth()
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
ggplot(scores.demographics.melt, aes(Score, value, color = variable)) +
geom_point(position=position_jitter(width=.3), size=.6) +
stat_smooth()
setwd("~/Julian Bass_College Works APC/Study From Home/anaLytic3/R/r-github")
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
ggplot(scores.demographics.melt, aes(Score, value, color = variable)) +
geom_point(position=position_jitter(width=.3), size=.6) +
stat_smooth()
ggplot(data = scores.demographics.melt, mapping = aes(x = Score, y = length(value), fill = variable)) + stat_summary(fun = length, geom="area", position="stack")
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
ggplot(scores.demographics.melt, aes(Score, value, color = variable)) +
geom_line(position=position_jitter(width=.3), size=.6) +
stat_smooth()
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
ggplot(scores.demographics.melt, aes(Score, value, color = variable)) +
geom_line(position=position_jitter(width=.3), size=.6) +
stat_smooth() +
facet_wrap(~ variable)
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
ggplot(scores.demographics.melt, aes(Score, value, color = variable)) +
geom_line(position=position_jitter(width=.3), size=.6) +
stat_smooth() +
facet_wrap(~ variable, nrow = 2)
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
ggplot(scores.demographics.melt, aes(Score, value, color = variable)) +
geom_line(position=position_jitter(width=.3), size=.6) +
stat_smooth() +
facet_wrap(~ variable, nrow = 4)
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
ggplot(scores.demographics.melt, aes(Score, value, color = variable)) +
geom_line(position=position_jitter(width=.3), size=.6) +
stat_smooth() +
facet_wrap(~ variable, nrow = 4, ncol = 4)
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
ggplot(scores.demographics.melt, aes(Score, value, color = variable)) +
geom_line(position=position_jitter(width=.3), size=.6) +
stat_smooth() +
facet_wrap(~ variable, nrow = 4, ncol = 1)
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
ggplot(scores.demographics.melt, aes(Score, value, color = variable)) +
geom_line(position=position_jitter(width=.3), size=.6) +
stat_smooth() +
facet_wrap(~ variable, nrow = 8)
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
ggplot(scores.demographics.melt, aes(Score, value, color = variable)) +
geom_point(position=position_jitter(width=.3), size=.6) +
stat_smooth() +
facet_wrap(~ variable, nrow = 8)
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
ggplot(scores.demographics.melt, aes(Score, value, color = variable), ncol = 8) +
geom_point(position=position_jitter(width=.3), size=.6) +
stat_smooth() +
facet_wrap(~ variable, nrow = 8)
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
ggplot(scores.demographics.melt, aes(Score, value, color = variable)) +
geom_point(position=position_jitter(width=.3), size=.6) +
stat_smooth() +
facet_wrap(~ variable)
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
ggplot(scores.demographics.melt, aes(Score, value, color = variable)) +
geom_point(position=position_jitter(width=.3), size=.6) +
stat_smooth() +
facet_wrap(~ variable)
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
ggplot(scores.demographics.melt, aes(Score, value, color = variable)) +
geom_point(position=position_jitter(width=.3), size=.6) +
stat_smooth() +
facet_wrap(~ variable, scales="free")
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
ggplot(scores.demographics.melt, aes(Score, value, color = variable)) +
geom_point(position=position_jitter(width=.3), size=.6) +
stat_smooth() +
facet_wrap(~ variable)
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
ggplot(scores.demographics.melt, aes(Score, value, color = variable)) +
geom_point(position=position_jitter(width=.3), size=.6) +
stat_smooth() +
facet_wrap(variable ~ value)
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
ggplot(scores.demographics.melt, aes(Score, value, color = variable)) +
geom_point(position=position_jitter(width=.3), size=.6) +
stat_smooth() +
facet_wrap(value ~ variable)
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
ggplot(scores.demographics.melt, aes(Score, value, color = variable)) +
geom_point(position=position_jitter(width=.3), size=.6) +
stat_smooth() +
facet_wrap(~ variable)
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
ggplot(scores.demographics.melt, aes(Score, value)) +
geom_point(position=position_jitter(width=.3), size=.6) +
stat_smooth() +
facet_wrap(~ variable)
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
ggplot(scores.demographics.melt, aes(Score, value, color = variable)) +
geom_point(position=position_jitter(width=.3), size=.6) +
stat_smooth() +
facet_wrap(~ variable)
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
ggplot(scores.demographics.melt, aes(Score, value, color = variable)) +
geom_point(position=position_jitter(width=.3), size=.6) +
facet_wrap(~ variable)
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
ggplot(scores.demographics.melt, aes(Score, value, color = variable)) +
geom_point(position=position_jitter(width=.3), size=.6) +
facet_wrap(value ~ variable)
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
ggplot(scores.demographics.melt, aes(Score, value, color = variable)) +
geom_point(position=position_jitter(width=.3), size=.6) +
stat_smooth() +
facet_wrap(~ variable)
library(ggplot2)
library(plyr)
library(reshape2)
library(knitr)
library(binom)
library(ggthemes)
install.packages("ggthemes")
library(ggplot2)
library(plyr)
library(reshape2)
library(knitr)
library(binom)
library(ggthemes)
happiness.data = read.csv(file = 'HappinessData2019.csv', header=TRUE)
# Changing some column names
names(happiness.data)[10] = 'Population.2020'
names(happiness.data)[11] = 'Population.density'
names(happiness.data)[12] = 'Migrants.net'
names(happiness.data)[13] = 'Urban.pop'
# Subset for Ratio Variables and Scores + melting
scores.ratios = happiness.data[,3:10]
scores.ratios.melt = melt(scores.ratios, measure.vars = names(scores.ratios)[2:7])
# Plotting melted ratio variable data according to population
ggplot(scores.ratios.melt, aes(x = Score, y = value), las = 2) +
geom_point(aes(color = value > 0.8)) +
facet_wrap(~ variable) +
geom_jitter(position = position_jitter(width = 0.1, height = 0.1), aes(color = value > 0.8), alpha = 0.5) +
labs(title = "Ratio Values According to Happiness Score", x='Scores', y='Value by Ratio Variable')
# Plotting melted ratio variable data according to population
ggplot(scores.ratios.melt, aes(x = log(Population.2020), y = value), las = 2) +
geom_point(aes(color = value > 0.8)) +
facet_wrap(~ variable) +
labs(title = "Ratio Values According to Population", x='Population', y='Value by Ratio Variable') + geom_jitter(position = position_jitter(width = 0.1, height = 0.1), aes(color = value > 0.8), alpha = 0.5)
variable.averages = ddply(scores.ratios.melt, "variable", summarize, avg.ratio = mean(value))
ggplot(data=scores.ratios.melt, mapping=aes(x = variable, y=value, color=variable)) +
geom_violin() +
geom_point(position=position_jitter(width=.3), size=.6) +
theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1)) +
scale_color_discrete(guide=FALSE) +
labs(x = 'Variables', y='Values', title='Ratio Variable Values by Melting') +
stat_summary(fun.y=median, geom="point", size=2, color="red")
ggplot(variable.averages, aes(x=avg.ratio, y=variable)) +
geom_bar(stat="identity") +
labs(x = 'Average Values', y='Variables', title='Average Values per Variable')
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
ggplot(scores.demographics.melt, aes(Score, value, color = variable)) +
geom_point(position=position_jitter(width=.3), size=.6) +
stat_smooth() +
facet_wrap(~ variable)
ggplot(scores.demographics.melt, aes(Score, value, color=factor(variable)))+
geom_point()+ggtitle("This plot looks a lot different from the default")+
theme_economist()+scale_colour_economist()
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
ggplot(scores.demographics.melt, aes(Score, value, color = variable)) +
geom_point(position=position_jitter(width=.3), size=.6) +
stat_smooth() +
facet_wrap(~ variable)
ggplot(scores.demographics.melt, aes(Score, length(value), color=factor(variable)))+
geom_point()+ggtitle("This plot looks a lot different from the default")+
theme_economist()+scale_colour_economist()
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
ggplot(scores.demographics.melt, aes(Score, value, color = variable)) +
geom_point(position=position_jitter(width=.3), size=.6) +
stat_smooth() +
facet_wrap(~ variable)
ggplot(scores.demographics.melt, aes(Score, value, color=factor(variable)))+
geom_point()+ggtitle("This plot looks a lot different from the default")+
theme_economist()+scale_colour_economist()
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, id.vars="Score")
ggplot(scores.demographics.melt, aes(Score, value, color = variable)) +
geom_point(position=position_jitter(width=.3), size=.6) +
stat_smooth() +
facet_wrap(~ variable)
ggplot(scores.demographics.melt, aes(Score, variable, color=factor(value)))+
geom_point()+ggtitle("This plot looks a lot different from the default")+
theme_economist()+scale_colour_economist()

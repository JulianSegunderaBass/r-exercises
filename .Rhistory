library(binom)
county.data = read.csv(file = 'county_data.csv', header=TRUE)
load('county_ggplot.rda')
# fill in
per.capita.scatterplot = function(x, n) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", n, x, "per.capita",   "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle("Violent Crimes by Population") + scale_x_log10()
}
per.capita.scatterplot(county.data$violent.crimes, county.data$population)
View(county.data)
# fill in
per.capita.scatterplot = function(x, n) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", "Population", "Violent Crimes", "per.capita",   "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle("Violent Crimes by Population") + scale_x_log10()
}
per.capita.scatterplot(county.data$violent.crimes, county.data$population)
# fill in
per.capita.scatterplot = function(x, n) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle("Violent Crimes by Population") + scale_x_log10()
}
per.capita.scatterplot(county.data$violent.crimes, county.data$population)
# fill in
per.capita.scatterplot = function(x, n) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle("Violent Crimes by Population") + scale_x_log10()
}
per.capita.scatterplot(county.data$violent.crimes, county.data$population)
per.capita.scatterplot(county.data$births, county.data$population)
# fill in
per.capita.scatterplot = function(x, n, main.title) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle("Violent Crimes by Population") + scale_x_log10()
}
per.capita.scatterplot(county.data$violent.crimes, county.data$population, "Test")
per.capita.scatterplot(county.data$births, county.data$population, "Test 2")
per.capita.scatterplot(county.data$deaths, county.data$population, "Test 3")
per.capita.scatterplot(county.data$infant.deaths, county.data$population, "Test 4")
# fill in
per.capita.scatterplot = function(x, n, main.title) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle(main.title) + scale_x_log10()
}
per.capita.scatterplot(county.data$violent.crimes, county.data$population, "Test")
per.capita.scatterplot(county.data$births, county.data$population, "Test 2")
per.capita.scatterplot(county.data$deaths, county.data$population, "Test 3")
per.capita.scatterplot(county.data$infant.deaths, county.data$population, "Test 4")
# fill in
per.capita.scatterplot = function(x, n, main.title) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle(main.title) + scale_x_log10()
}
per.capita.scatterplot(county.data$violent.crimes, county.data$population, "Violent Crimes by Population")
per.capita.scatterplot(county.data$births, county.data$population, "Births by Population")
per.capita.scatterplot(county.data$deaths, county.data$population, "Deaths by Population")
per.capita.scatterplot(county.data$infant.deaths, county.data$population, "Infant Deaths by Population")
library(ggplot2)
library(plyr)
library(reshape2)
library(knitr)
library(binom)
county.data = read.csv(file = 'county_data.csv', header=TRUE)
load('county_ggplot.rda')
# fill in
# Scatterplot function that takes in a per capita column value, a function (in this case population) and a plot title
per.capita.scatterplot = function(x, n, main.title) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle(main.title) +  scale_x_log10()
}
# Violent Crimes by Population
per.capita.scatterplot(county.data$violent.crimes, county.data$population, "Violent Crimes by Population")
# Births by Population
per.capita.scatterplot(county.data$births, county.data$population, "Births by Population")
# Deaths by Population
per.capita.scatterplot(county.data$deaths, county.data$population, "Deaths by Population")
# Infant Deaths by Population
per.capita.scatterplot(county.data$infant.deaths, county.data$population, "Infant Deaths by Population")
# fill in
find.std.residual = function(data, variable, null.prob) {
null.prob = null.prob / 100
data = mutate(data, expected.null = variable * null.prob,
std.dev.null = sqrt(expected.null * (1 - null.prob)),
residual = variable - expected.null,
std.residual = residual / std.dev.null)
# Decreasing order data by std.residual
ordered = data[order(-data$std.residual), ]
return (ordered)
}
# fill in
# Initial function call
top.15.crimes = find.std.residual(county.data, county.data$violent.crimes, 1)
# Retrieving only the top 15 records in decreasing crime rate order
top.15.crimes = top.15.crimes[order(-top.15.crimes$violent.crimes)[1:15], ]
top.15.crimes
# fill in
# Code taken from Exercise 6 solution
map.std.residual = function(county.gg, county.data) {
map.rate = with(county.data, sum(violent.crimes) / sum(population))
county.mapdata = merge(county.gg, county.data, by.x = 'fips', by.y='STCOU')
county.mapdata = arrange(county.mapdata, order)
ggplot(data = county.mapdata, mapping = aes(x = long, y = lat, group = group, fill = violent.crimes)) +
geom_polygon() +
coord_map() +
labs(fill = 'Violent Crime Rate', title='Violent Crimes') +
coord_map() +
scale_fill_gradient2(low = 'grey', high = 'red', mid = 'grey', midpoint = map.rate)
}
# Calling the mapping function with the top 15 crimes
map.std.residual(county.gg, top.15.crimes)
# fill in
# Getting the Violent Crime per Capita Rate
crime.rate = sum(county.data$violent.crimes) / sum(county.data$population)
# Passing the crime rate as the null hypothesis
map.std.residual(county.gg, find.std.residual(county.data, county.data$violent.crimes, crime.rate))
library(plyr)
library(ggplot2)
library(reshape2)
expenditures = read.csv(file = 'dataset_hw4.csv', header = TRUE)
# fill in
# Subset for home categories
apartments.and.homes = subset(expenditures, home.type == "apartment or flat" | home.type == "high-rise" | home.type == "single family detached")
qplot(sample = housing, data = apartments.and.homes, color=home.type) + facet_wrap(~ home.type)
# fill in
qplot(sample = housing, data = apartments.and.homes, color=home.type) +
facet_wrap(~ (housing > 5000) + home.type)
View(expenditures)
# fill in
positive.housing = subset(expenditures, housing < 0)
qplot(sample = housing, data = apartments.and.homes, color=home.type) +
facet_wrap(~ (housing > 5000) + home.type)
positive.housing
# fill in
positive.housing = subset(expenditures, housing > 0)
qplot(sample = housing, data = apartments.and.homes, color=home.type) +
facet_wrap(~ (housing > 5000) + home.type)
positive.housing
# fill in
apartments.and.homes$log.housing = log(apartments.and.homes$housing)
qplot(sample = log.housing, data = apartments.and.homes, color=home.type) +
facet_wrap(~ (housing > 5000) + home.type)
# fill in
apartments.and.homes$log.housing = log(apartments.and.homes$housing)
qplot(sample = log.housing, data = apartments.and.homes, color=home.type)
#facet_wrap(~ (housing > 5000) + home.type)
# fill in
# Subset for home categories
apartments.and.homes = subset(expenditures, home.type == "apartment or flat" | home.type == "high-rise" | home.type == "single family detached")
apartments.and.homes$categories = ifelse(apartments.and.homes$home.type == "single family detached", "homes", "apartments")
qplot(sample = housing, data = apartments.and.homes, color=home.type) + facet_wrap(~ categories)
# fill in
# Subset for home categories
apartments.and.homes = subset(expenditures, home.type == "apartment or flat" | home.type == "high-rise" | home.type == "single family detached")
apartments.and.homes$categories = ifelse(apartments.and.homes$home.type == "single family detached", "homes", "apartments")
qplot(sample = housing, data = apartments.and.homes, color=home.type) + facet_wrap(~ "categories")
library(plyr)
library(ggplot2)
library(reshape2)
expenditures = read.csv(file = 'dataset_hw4.csv', header = TRUE)
# fill in
# Subset for home categories
apartments.and.homes = subset(expenditures, home.type == "apartment or flat" | home.type == "high-rise" | home.type == "single family detached")
apartments.and.homes$categories = ifelse(apartments.and.homes$home.type == "single family detached", "homes", "apartments")
qplot(sample = housing, data = apartments.and.homes, color=home.type) + facet_wrap(~ "categories")
setwd("~/Julian Bass_College Works APC/Study From Home/anaLytic3/R/r-github")
# fill in
# Re-assigning movies to remove null entries
movies = na.omit(movies)
library(plyr)
library(ggplot2)
library(reshape2)
expenditures = read.csv(file = 'dataset_hw4.csv', header = TRUE)
# fill in
# Subset for home categories
apartments.and.homes = subset(expenditures, home.type == "apartment or flat" | home.type == "high-rise" | home.type == "single family detached")
apartments.and.homes$categories = ifelse(apartments.and.homes$home.type == "single family detached", "homes", "apartments")
qplot(sample = housing, data = apartments.and.homes, color=home.type) + facet_wrap(~ categories)
# fill in
apartments.and.homes$log.housing = log(apartments.and.homes$housing)
qplot(sample = log.housing, data = apartments.and.homes, color=home.type) + facet_wrap(~ categories)
# fill in
library(ggplot2movies)
movies$year.groupings = ifelse(movies$year >= 1930, "1930 and Beyond", "Before 1930")
ggplot(movies, aes(x = year, y = rating)) +
geom_line(aes(color = factor(year >= 1930))) +
stat_summary(fun.data = mean_cl_boot, geom = "point", color = "black") +
facet_wrap(~ year.groupings, nrow = 2)
# fill in
# Re-assigning movies to remove null entries
movies = na.omit(movies)
# Repeat function repeats as many as the total rows in movies
genre = rep(NA, nrow(movies))
# Getting the sum of the binary row values for each movie across the different genres
# 18:24 represents the columns for the genres
# For context, if the sum is greater than 1, the movie is part of multiple genres
count = rowSums(movies[, 18:24])
# Conditional checking for each record
# count == 1 means a movie is part of one genre
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
movies$genre = as.factor(genre)
qplot(movies, mapping = aes(x = year, y = rating, color = rating)) +
stat_summary(fun = mean, geom = "line", size = 0.8) +
geom_smooth(color = "red") +
facet_wrap(~ genre)
# fill in
# Re-assigning movies to remove null entries
movies = na.omit(movies)
# Repeat function repeats as many as the total rows in movies
genre = rep(NA, nrow(movies))
# Getting the sum of the binary row values for each movie across the different genres
# 18:24 represents the columns for the genres
# For context, if the sum is greater than 1, the movie is part of multiple genres
count = rowSums(movies[, 18:24])
# Conditional checking for each record
# count == 1 means a movie is part of one genre
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
movies$genre = as.factor(genre)
ggplot(movies, mapping = aes(x = year, y = rating, color = rating)) +
stat_summary(fun = mean, geom = "line", size = 0.8) +
geom_smooth(color = "red") +
facet_wrap(~ genre)
# fill in
# Re-assigning movies to remove null entries
movies = na.omit(movies)
# Repeat function repeats as many as the total rows in movies
genre = rep(NA, nrow(movies))
# Getting the sum of the binary row values for each movie across the different genres
# 18:24 represents the columns for the genres
# For context, if the sum is greater than 1, the movie is part of multiple genres
count = rowSums(movies[, 18:24])
# Conditional checking for each record
# count == 1 means a movie is part of one genre
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
movies$genre = as.factor(genre)
ggplot(movies, mapping = aes(x = year, y = rating, color = rating)) +
stat_summary(fun = mean, geom = "line", size = 0.8) +
geom_smooth(color = "red") +
facet_wrap(~ genre)
qplot(sample = rating, data = movies, color=genre) + facet_wrap(~ genre)
# fill in
# Re-assigning movies to remove null entries
movies = na.omit(movies)
# Repeat function repeats as many as the total rows in movies
genre = rep(NA, nrow(movies))
# Getting the sum of the binary row values for each movie across the different genres
# 18:24 represents the columns for the genres
# For context, if the sum is greater than 1, the movie is part of multiple genres
count = rowSums(movies[, 18:24])
# Conditional checking for each record
# count == 1 means a movie is part of one genre
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
movies$genre = as.factor(genre)
ggplot(movies, mapping = aes(x = year, y = rating, color = rating)) +
stat_summary(fun = mean, geom = "line", size = 0.8) +
geom_smooth(color = "red") +
facet_wrap(~ genre)
qplot(sample = rating, data = movies, color=genre) + geom_smooth(color = "red") + facet_wrap(~ genre)
# fill in
# Re-assigning movies to remove null entries
movies = na.omit(movies)
# Repeat function repeats as many as the total rows in movies
genre = rep(NA, nrow(movies))
# Getting the sum of the binary row values for each movie across the different genres
# 18:24 represents the columns for the genres
# For context, if the sum is greater than 1, the movie is part of multiple genres
count = rowSums(movies[, 18:24])
# Conditional checking for each record
# count == 1 means a movie is part of one genre
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
movies$genre = as.factor(genre)
ggplot(movies, mapping = aes(x = year, y = rating, color = rating)) +
stat_summary(fun = mean, geom = "line", size = 0.8) +
geom_smooth(color = "red") +
facet_wrap(~ genre)
qplot(sample = rating, data = movies, color=genre) + facet_wrap(~ genre)
# fill in
# Re-assigning movies to remove null entries
movies = na.omit(movies)
# Repeat function repeats as many as the total rows in movies
genre = rep(NA, nrow(movies))
# Getting the sum of the binary row values for each movie across the different genres
# 18:24 represents the columns for the genres
# For context, if the sum is greater than 1, the movie is part of multiple genres
count = rowSums(movies[, 18:24])
# Conditional checking for each record
# count == 1 means a movie is part of one genre
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
movies$genre = as.factor(genre)
ggplot(movies, mapping = aes(x = year, y = rating, color = rating)) +
stat_summary(fun = mean, geom = "line", size = 0.8) +
geom_smooth(color = "red") +
facet_wrap(~ genre)
qplot(sample = rating, data = movies, color=genre) + stat_summary(fun = mean, geom = "line", size = 0.8) + facet_wrap(~ genre)
# fill in
# Re-assigning movies to remove null entries
movies = na.omit(movies)
# Repeat function repeats as many as the total rows in movies
genre = rep(NA, nrow(movies))
# Getting the sum of the binary row values for each movie across the different genres
# 18:24 represents the columns for the genres
# For context, if the sum is greater than 1, the movie is part of multiple genres
count = rowSums(movies[, 18:24])
# Conditional checking for each record
# count == 1 means a movie is part of one genre
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
movies$genre = as.factor(genre)
ggplot(movies, mapping = aes(x = year, y = rating, color = rating)) +
stat_summary(fun = mean, geom = "line", size = 0.8) +
geom_smooth(color = "red") +
facet_wrap(~ genre)
qplot(sample = rating, data = movies, color=genre) + facet_wrap(~ genre)
# fill in
# Re-assigning movies to remove null entries
movies = na.omit(movies)
# Repeat function repeats as many as the total rows in movies
genre = rep(NA, nrow(movies))
# Getting the sum of the binary row values for each movie across the different genres
# 18:24 represents the columns for the genres
# For context, if the sum is greater than 1, the movie is part of multiple genres
count = rowSums(movies[, 18:24])
# Conditional checking for each record
# count == 1 means a movie is part of one genre
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
movies$genre = as.factor(genre)
ggplot(movies, mapping = aes(x = year, y = rating, color = rating)) +
stat_summary(fun = mean, geom = "line", size = 0.8) +
geom_smooth(color = "red") +
facet_wrap(~ genre)
qplot(sample = rating, data = movies, color=genre)
# fill in
# Re-assigning movies to remove null entries
movies = na.omit(movies)
# Repeat function repeats as many as the total rows in movies
genre = rep(NA, nrow(movies))
# Getting the sum of the binary row values for each movie across the different genres
# 18:24 represents the columns for the genres
# For context, if the sum is greater than 1, the movie is part of multiple genres
count = rowSums(movies[, 18:24])
# Conditional checking for each record
# count == 1 means a movie is part of one genre
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
movies$genre = as.factor(genre)
ggplot(movies, mapping = aes(x = year, y = rating, color = rating)) +
stat_summary(fun = mean, geom = "line", size = 0.8) +
geom_smooth(color = "red") +
facet_wrap(~ genre)
qplot(sample = rating, data = movies, color=genre, geom = "line")
# fill in
# Re-assigning movies to remove null entries
movies = na.omit(movies)
# Repeat function repeats as many as the total rows in movies
genre = rep(NA, nrow(movies))
# Getting the sum of the binary row values for each movie across the different genres
# 18:24 represents the columns for the genres
# For context, if the sum is greater than 1, the movie is part of multiple genres
count = rowSums(movies[, 18:24])
# Conditional checking for each record
# count == 1 means a movie is part of one genre
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
movies$genre = as.factor(genre)
ggplot(movies, mapping = aes(x = year, y = rating, color = rating)) +
stat_summary(fun = mean, geom = "line", size = 0.8) +
geom_smooth(color = "red") +
facet_wrap(~ genre)
qplot(sample = rating, data = movies, color=genre, geom = "point")
# fill in
# Re-assigning movies to remove null entries
movies = na.omit(movies)
# Repeat function repeats as many as the total rows in movies
genre = rep(NA, nrow(movies))
# Getting the sum of the binary row values for each movie across the different genres
# 18:24 represents the columns for the genres
# For context, if the sum is greater than 1, the movie is part of multiple genres
count = rowSums(movies[, 18:24])
# Conditional checking for each record
# count == 1 means a movie is part of one genre
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
movies$genre = as.factor(genre)
ggplot(movies, mapping = aes(x = year, y = rating, color = rating)) +
stat_summary(fun = mean, geom = "line", size = 0.8) +
geom_smooth(color = "red") +
facet_wrap(~ genre)
qplot(sample = rating, data = movies, color=genre)
# fill in
library(ggplot2movies)
movies$year.groupings = ifelse(movies$year >= 1930, "1930 and Beyond", "Before 1930")
movies$log.rating = log(movies$rating)
ggplot(movies, aes(x = year, y = log.rating)) +
geom_line(aes(color = factor(year >= 1930))) +
stat_summary(fun.data = mean_cl_boot, geom = "point", color = "black") +
facet_wrap(~ year.groupings, nrow = 2)
# fill in
# Re-assigning movies to remove null entries
movies = na.omit(movies)
# Repeat function repeats as many as the total rows in movies
genre = rep(NA, nrow(movies))
# Getting the sum of the binary row values for each movie across the different genres
# 18:24 represents the columns for the genres
# For context, if the sum is greater than 1, the movie is part of multiple genres
count = rowSums(movies[, 18:24])
# Conditional checking for each record
# count == 1 means a movie is part of one genre
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
movies$genre = as.factor(genre)
ggplot(movies, mapping = aes(x = year, y = rating, color = rating)) +
stat_summary(fun = mean, geom = "line", size = 0.8) +
geom_smooth(color = "red") +
facet_wrap(~ genre)
qplot(sample = rating, data = movies, color=genre)

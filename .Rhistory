library(plyr)
library(reshape2)
library(knitr)
library(binom)
county.data = read.csv(file = 'county_data.csv', header=TRUE)
load('county_ggplot.rda')
# fill in
# Scatterplot function that takes in a per capita column value, a function (in this case population) and a plot title
per.capita.scatterplot = function(x, n, main.title) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle(main.title) +  scale_x_log10()
}
# Violent Crimes by Population
per.capita.scatterplot(county.data$violent.crimes, county.data$population, "Violent Crimes by Population")
# Births by Population
per.capita.scatterplot(county.data$births, county.data$population, "Births by Population")
# Deaths by Population
per.capita.scatterplot(county.data$deaths, county.data$population, "Deaths by Population")
# Infant Deaths by Population
per.capita.scatterplot(county.data$infant.deaths, county.data$population, "Infant Deaths by Population")
# fill in
find.std.residual = function(data, variable, null.prob) {
null.prob = null.prob / 100
data = mutate(data, expected.null = variable * null.prob,
std.dev.null = sqrt(expected.null * (1 - null.prob)),
residual = variable - expected.null,
std.residual = residual / std.dev.null)
# Decreasing order data by std.residual
ordered = data[order(-data$std.residual), ]
return (ordered)
}
# fill in
# Initial function call
top.15.crimes = find.std.residual(county.data, county.data$violent.crimes, 1)
# Retrieving only the top 15 records in decreasing crime rate order
top.15.crimes = top.15.crimes[order(-top.15.crimes$violent.crimes)[1:15], ]
top.15.crimes
# fill in
# Code taken from Exercise 6 solution
map.std.residual = function(county.gg, county.data) {
map.rate = with(county.data, sum(violent.crimes) / sum(population))
county.mapdata = merge(county.gg, county.data, by.x = 'fips', by.y='STCOU')
county.mapdata = arrange(county.mapdata, order)
ggplot(data = county.mapdata, mapping = aes(x = long, y = lat, group = group, fill = violent.crimes)) +
geom_polygon() +
coord_map() +
labs(fill = 'Violent Crime Rate', title='Violent Crimes') +
coord_map() +
scale_fill_gradient2(low = 'grey', high = 'red', mid = 'grey', midpoint = map.rate)
}
# Calling the mapping function with the top 15 crimes
map.std.residual(county.gg, top.15.crimes)
# fill in
# Getting the Violent Crime per Capita Rate
crime.rate = sum(county.data$violent.crimes) / sum(county.data$population)
# Passing the crime rate as the null hypothesis
map.std.residual(county.gg, find.std.residual(county.data, county.data$violent.crimes, crime.rate))
library(plyr)
library(ggplot2)
library(reshape2)
expenditures = read.csv(file = 'dataset_hw4.csv', header = TRUE)
# fill in
# Subset for home categories
apartments.and.homes = subset(expenditures, home.type == "apartment or flat" | home.type == "high-rise" | home.type == "single family detached")
qplot(sample = housing, data = apartments.and.homes, color=home.type) + facet_wrap(~ home.type)
# fill in
qplot(sample = housing, data = apartments.and.homes, color=home.type) +
facet_wrap(~ (housing > 5000) + home.type)
View(expenditures)
# fill in
positive.housing = subset(expenditures, housing < 0)
qplot(sample = housing, data = apartments.and.homes, color=home.type) +
facet_wrap(~ (housing > 5000) + home.type)
positive.housing
# fill in
positive.housing = subset(expenditures, housing > 0)
qplot(sample = housing, data = apartments.and.homes, color=home.type) +
facet_wrap(~ (housing > 5000) + home.type)
positive.housing
# fill in
apartments.and.homes$log.housing = log(apartments.and.homes$housing)
qplot(sample = log.housing, data = apartments.and.homes, color=home.type) +
facet_wrap(~ (housing > 5000) + home.type)
# fill in
apartments.and.homes$log.housing = log(apartments.and.homes$housing)
qplot(sample = log.housing, data = apartments.and.homes, color=home.type)
#facet_wrap(~ (housing > 5000) + home.type)
# fill in
# Subset for home categories
apartments.and.homes = subset(expenditures, home.type == "apartment or flat" | home.type == "high-rise" | home.type == "single family detached")
apartments.and.homes$categories = ifelse(apartments.and.homes$home.type == "single family detached", "homes", "apartments")
qplot(sample = housing, data = apartments.and.homes, color=home.type) + facet_wrap(~ categories)
# fill in
# Subset for home categories
apartments.and.homes = subset(expenditures, home.type == "apartment or flat" | home.type == "high-rise" | home.type == "single family detached")
apartments.and.homes$categories = ifelse(apartments.and.homes$home.type == "single family detached", "homes", "apartments")
qplot(sample = housing, data = apartments.and.homes, color=home.type) + facet_wrap(~ "categories")
library(plyr)
library(ggplot2)
library(reshape2)
expenditures = read.csv(file = 'dataset_hw4.csv', header = TRUE)
# fill in
# Subset for home categories
apartments.and.homes = subset(expenditures, home.type == "apartment or flat" | home.type == "high-rise" | home.type == "single family detached")
apartments.and.homes$categories = ifelse(apartments.and.homes$home.type == "single family detached", "homes", "apartments")
qplot(sample = housing, data = apartments.and.homes, color=home.type) + facet_wrap(~ "categories")
setwd("~/Julian Bass_College Works APC/Study From Home/anaLytic3/R/r-github")
# fill in
# Code taken from Exercise 6 solution
map.std.residual = function(county.gg, county.data) {
#map.rate = with(county.data, sum(violent.crimes) / sum(population))
#county.mapdata = merge(county.gg, county.data, by.x = 'fips', by.y='STCOU')
#county.mapdata = arrange(county.mapdata, order)
#ggplot(data = county.mapdata, mapping = aes(x = long, y = lat, group = group, fill = violent.crimes)) +
#geom_polygon() +
#coord_map() +
#labs(fill = 'Violent Crime Rate', title='Violent Crimes') +
#coord_map() +
#scale_fill_gradient2(low = 'grey', high = 'red', mid = 'grey', midpoint = map.rate)
US.per.capita = sum(county.data$violent.crimes) / sum(county.data$population)
county.merge = merge(x = county.gg, y = county.data, by.x = "fips", by.y = "STCOU")
county.merge = arrange(county.merge, order)
county_list = map_data("county")
ggplot() +
geom_map(data = county_list, map = county_list, mapping = aes(x = long, y = lat, map_id = region), col = "white", fill = "grey") +
geom_polygon(data - county.merge, mapping = aes(x = long, y = lat, group = group, fill = std.residual)) +
coord_map() +
labs(x = "Longitude", y = "Latitude", fill = "Standard Residual", group = "Counties", title = "Top 15 Counties \n with High Standard Residual") +
scale_fill_gradientn(limits = c(0, 4000), colours = c("grey", "violet", "blue"), breaks = c(0, 1000, 2000, 3000, 4000))
}
# Calling the mapping function with the top 15 crimes
map.std.residual(county.gg, top.15.crimes)
library(ggplot2)
library(plyr)
library(reshape2)
library(knitr)
library(binom)
county.data = read.csv(file = 'county_data.csv', header=TRUE)
load('county_ggplot.rda')
# fill in
# Scatterplot function that takes in a per capita column value, a function (in this case population) and a plot title
per.capita.scatterplot = function(x, n, main.title) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle(main.title) +  scale_x_log10()
}
# Violent Crimes by Population
per.capita.scatterplot(county.data$violent.crimes, county.data$population, "Violent Crimes by Population")
# Births by Population
per.capita.scatterplot(county.data$births, county.data$population, "Births by Population")
# Deaths by Population
per.capita.scatterplot(county.data$deaths, county.data$population, "Deaths by Population")
# Infant Deaths by Population
per.capita.scatterplot(county.data$infant.deaths, county.data$population, "Infant Deaths by Population")
# fill in
find.std.residual = function(data, variable, null.prob) {
null.prob = null.prob / 100
data = mutate(data, expected.null = variable * null.prob,
std.dev.null = sqrt(expected.null * (1 - null.prob)),
residual = variable - expected.null,
std.residual = residual / std.dev.null)
# Decreasing order data by std.residual
ordered = data[order(-data$std.residual), ]
return (ordered)
}
# fill in
# Initial function call
top.15.crimes = find.std.residual(county.data, county.data$violent.crimes, 1)
# Retrieving only the top 15 records in decreasing crime rate order
top.15.crimes = top.15.crimes[order(-top.15.crimes$violent.crimes)[1:15], ]
top.15.crimes
# fill in
# Code taken from Exercise 6 solution
map.std.residual = function(county.gg, county.data) {
#map.rate = with(county.data, sum(violent.crimes) / sum(population))
#county.mapdata = merge(county.gg, county.data, by.x = 'fips', by.y='STCOU')
#county.mapdata = arrange(county.mapdata, order)
#ggplot(data = county.mapdata, mapping = aes(x = long, y = lat, group = group, fill = violent.crimes)) +
#geom_polygon() +
#coord_map() +
#labs(fill = 'Violent Crime Rate', title='Violent Crimes') +
#coord_map() +
#scale_fill_gradient2(low = 'grey', high = 'red', mid = 'grey', midpoint = map.rate)
US.per.capita = sum(county.data$violent.crimes) / sum(county.data$population)
county.merge = merge(x = county.gg, y = county.data, by.x = "fips", by.y = "STCOU")
county.merge = arrange(county.merge, order)
county_list = map_data("county")
ggplot() +
geom_map(data = county_list, map = county_list, mapping = aes(x = long, y = lat, map_id = region), col = "white", fill = "grey") +
geom_polygon(data - county.merge, mapping = aes(x = long, y = lat, group = group, fill = std.residual)) +
coord_map() +
labs(x = "Longitude", y = "Latitude", fill = "Standard Residual", group = "Counties", title = "Top 15 Counties \n with High Standard Residual") +
scale_fill_gradientn(limits = c(0, 4000), colours = c("grey", "violet", "blue"), breaks = c(0, 1000, 2000, 3000, 4000))
}
# Calling the mapping function with the top 15 crimes
map.std.residual(county.gg, top.15.crimes)
# fill in
# Code taken from Exercise 6 solution
map.std.residual = function(county.gg, county.data) {
#map.rate = with(county.data, sum(violent.crimes) / sum(population))
#county.mapdata = merge(county.gg, county.data, by.x = 'fips', by.y='STCOU')
#county.mapdata = arrange(county.mapdata, order)
#ggplot(data = county.mapdata, mapping = aes(x = long, y = lat, group = group, fill = violent.crimes)) +
#geom_polygon() +
#coord_map() +
#labs(fill = 'Violent Crime Rate', title='Violent Crimes') +
#coord_map() +
#scale_fill_gradient2(low = 'grey', high = 'red', mid = 'grey', midpoint = map.rate)
US.per.capita = sum(county.data$violent.crimes) / sum(county.data$population)
county.merge = merge(x = county.gg, y = county.data, by.x = "fips", by.y = "STCOU")
county.merge = arrange(county.merge, order)
county_list = map_data("county")
ggplot() +
geom_map(data = county_list, map = county_list, mapping = aes(x = long, y = lat, map_id = region), col = "white", fill = "grey") +
geom_polygon(data - county.merge, mapping = aes(x = long, y = lat, group = group, fill = std.residual)) +
coord_map() +
labs(x = "Longitude", y = "Latitude", fill = "Standard Residual", group = "Counties", title = "Top 15 Counties \n with High Standard Residual") +
scale_fill_gradientn(limits = c(0, 4000), colours = c("grey", "violet", "blue"), breaks = c(0, 1000, 2000, 3000, 4000))
}
# Calling the mapping function with the top 15 crimes
map.std.residual(county.gg, top.15.crimes)
# fill in
# Initial function call
top.15.crimes = find.std.residual(county.data, county.data$violent.crimes, 1)
# Retrieving only the top 15 records in decreasing crime rate order
top.15.crimes = top.15.crimes[order(-top.15.crimes$violent.crimes)[1:15], ]
top.15.crimes
# fill in
# Code taken from Exercise 6 solution
map.std.residual = function(county.gg, county.data) {
#map.rate = with(county.data, sum(violent.crimes) / sum(population))
#county.mapdata = merge(county.gg, county.data, by.x = 'fips', by.y='STCOU')
#county.mapdata = arrange(county.mapdata, order)
#ggplot(data = county.mapdata, mapping = aes(x = long, y = lat, group = group, fill = violent.crimes)) +
#geom_polygon() +
#coord_map() +
#labs(fill = 'Violent Crime Rate', title='Violent Crimes') +
#coord_map() +
#scale_fill_gradient2(low = 'grey', high = 'red', mid = 'grey', midpoint = map.rate)
US.per.capita = sum(county.data$violent.crimes) / sum(county.data$population)
county.merge = merge(x = county.gg, y = county.data, by.x = "fips", by.y = "STCOU")
county.merge = arrange(county.merge, order)
county_list = map_data("county")
ggplot() +
geom_map(data = county_list, map = county_list, mapping = aes(x = long, y = lat, map_id = region), col = "white", fill = "grey") +
geom_polygon(data - county.merge, mapping = aes(x = long, y = lat, group = group, fill = std.residual)) +
coord_map() +
labs(x = "Longitude", y = "Latitude", fill = "Standard Residual", group = "Counties", title = "Top 15 Counties \n with High Standard Residual") +
scale_fill_gradientn(limits = c(0, 4000), colours = c("grey", "violet", "blue"), breaks = c(0, 1000, 2000, 3000, 4000))
}
# Calling the mapping function with the top 15 crimes
map.std.residual(county.gg, top.15.crimes)
# fill in
# Initial function call
top.15.crimes = find.std.residual(county.data, county.data$violent.crimes, 0.01)
# Retrieving only the top 15 records in decreasing crime rate order
top.15.crimes = top.15.crimes[order(-top.15.crimes$violent.crimes)[1:15], ]
top.15.crimes
# fill in
# Code taken from Exercise 6 solution
map.std.residual = function(county.gg, county.data) {
#map.rate = with(county.data, sum(violent.crimes) / sum(population))
#county.mapdata = merge(county.gg, county.data, by.x = 'fips', by.y='STCOU')
#county.mapdata = arrange(county.mapdata, order)
#ggplot(data = county.mapdata, mapping = aes(x = long, y = lat, group = group, fill = violent.crimes)) +
#geom_polygon() +
#coord_map() +
#labs(fill = 'Violent Crime Rate', title='Violent Crimes') +
#coord_map() +
#scale_fill_gradient2(low = 'grey', high = 'red', mid = 'grey', midpoint = map.rate)
US.per.capita = sum(county.data$violent.crimes) / sum(county.data$population)
county.merge = merge(x = county.gg, y = county.data, by.x = "fips", by.y = "STCOU")
county.merge = arrange(county.merge, order)
county_list = map_data("county")
ggplot() +
geom_map(data = county_list, map = county_list, mapping = aes(x = long, y = lat, map_id = region), col = "white", fill = "grey") +
geom_polygon(data - county.merge, mapping = aes(x = long, y = lat, group = group, fill = std.residual)) +
coord_map() +
labs(x = "Longitude", y = "Latitude", fill = "Standard Residual", group = "Counties", title = "Top 15 Counties \n with High Standard Residual") +
scale_fill_gradientn(limits = c(0, 4000), colours = c("grey", "violet", "blue"), breaks = c(0, 1000, 2000, 3000, 4000))
}
# Calling the mapping function with the top 15 crimes
map.std.residual(county.gg, top.15.crimes)
# fill in
# Initial function call
top.15.crimes = find.std.residual(county.data, county.data$violent.crimes, 0.01)
# Retrieving only the top 15 records in decreasing crime rate order
top.15.crimes = top.15.crimes[order(-top.15.crimes$violent.crimes)[1:15], ]
kable(top.15.crimes, digits = 4)
# fill in
# Code taken from Exercise 6 solution
map.std.residual = function(county.gg, county.data) {
#map.rate = with(county.data, sum(violent.crimes) / sum(population))
#county.mapdata = merge(county.gg, county.data, by.x = 'fips', by.y='STCOU')
#county.mapdata = arrange(county.mapdata, order)
#ggplot(data = county.mapdata, mapping = aes(x = long, y = lat, group = group, fill = violent.crimes)) +
#geom_polygon() +
#coord_map() +
#labs(fill = 'Violent Crime Rate', title='Violent Crimes') +
#coord_map() +
#scale_fill_gradient2(low = 'grey', high = 'red', mid = 'grey', midpoint = map.rate)
US.per.capita = sum(county.data$violent.crimes) / sum(county.data$population)
county.merge = merge(x = county.gg, y = county.data, by.x = "fips", by.y = "STCOU")
county.merge = arrange(county.merge, order)
county_list = map_data("county")
ggplot() +
geom_map(data = county_list, map = county_list, mapping = aes(x = long, y = lat, map_id = region), col = "white", fill = "grey") +
geom_polygon(data - county.merge, mapping = aes(x = long, y = lat, group = group, fill = std.residual)) +
coord_map() +
labs(x = "Longitude", y = "Latitude", fill = "Standard Residual", group = "Counties", title = "Top 15 Counties \n with High Standard Residual") +
scale_fill_gradientn(limits = c(0, 4000), colours = c("grey", "violet", "blue"), breaks = c(0, 1000, 2000, 3000, 4000))
}
# Calling the mapping function with the top 15 crimes
map.std.residual(county.gg, top.15.crimes)
# fill in
# Initial function call
top.15.crimes = find.std.residual(county.data, county.data$violent.crimes, 0.01)
# Retrieving only the top 15 records in decreasing crime rate order
top.15.crimes = top.15.crimes[order(-top.15.crimes$violent.crimes)[1:15], ]
top.15.crimes
library(ggplot2)
library(plyr)
library(reshape2)
library(knitr)
library(binom)
county.data = read.csv(file = 'county_data.csv', header=TRUE)
load('county_ggplot.rda')
# fill in
# Scatterplot function that takes in a per capita column value, a function (in this case population) and a plot title
per.capita.scatterplot = function(x, n, main.title) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle(main.title) +  scale_x_log10()
}
# Violent Crimes by Population
per.capita.scatterplot(county.data$violent.crimes, county.data$population, "Violent Crimes by Population")
# Births by Population
per.capita.scatterplot(county.data$births, county.data$population, "Births by Population")
# Deaths by Population
per.capita.scatterplot(county.data$deaths, county.data$population, "Deaths by Population")
# Infant Deaths by Population
per.capita.scatterplot(county.data$infant.deaths, county.data$population, "Infant Deaths by Population")
# fill in
find.std.residual = function(data, variable, null.prob) {
data = mutate(data, expected.null = variable * null.prob,
std.dev.null = sqrt(expected.null * (1 - null.prob)),
residual = variable - expected.null,
std.residual = residual / std.dev.null)
# Decreasing order data by std.residual
ordered = data[order(-data$std.residual), ]
return (ordered)
}
# fill in
# Initial function call
top.15.crimes = find.std.residual(county.data, county.data$violent.crimes, 0.01)
# Retrieving only the top 15 records in decreasing crime rate order
top.15.crimes = top.15.crimes[order(-top.15.crimes$violent.crimes)[1:15], ]
top.15.crimes
# fill in
# Code taken from Exercise 6 solution
map.std.residual = function(county.gg, county.data) {
#map.rate = with(county.data, sum(violent.crimes) / sum(population))
#county.mapdata = merge(county.gg, county.data, by.x = 'fips', by.y='STCOU')
#county.mapdata = arrange(county.mapdata, order)
#ggplot(data = county.mapdata, mapping = aes(x = long, y = lat, group = group, fill = violent.crimes)) +
#geom_polygon() +
#coord_map() +
#labs(fill = 'Violent Crime Rate', title='Violent Crimes') +
#coord_map() +
#scale_fill_gradient2(low = 'grey', high = 'red', mid = 'grey', midpoint = map.rate)
US.per.capita = sum(county.data$violent.crimes) / sum(county.data$population)
county.merge = merge(x = county.gg, y = county.data, by.x = "fips", by.y = "STCOU")
county.merge = arrange(county.merge, order)
county_list = map_data("county")
ggplot() +
geom_map(data = county_list, map = county_list, mapping = aes(x = long, y = lat, map_id = region), col = "white", fill = "grey") +
geom_polygon(data - county.merge, mapping = aes(x = long, y = lat, group = group, fill = std.residual)) +
coord_map() +
labs(x = "Longitude", y = "Latitude", fill = "Standard Residual", group = "Counties", title = "Top 15 Counties \n with High Standard Residual") +
scale_fill_gradientn(limits = c(0, 4000), colours = c("grey", "violet", "blue"), breaks = c(0, 1000, 2000, 3000, 4000))
}
# Calling the mapping function with the top 15 crimes
map.std.residual(county.gg, top.15.crimes)
# fill in
find.std.residual = function(data, variable, null.prob) {
data = mutate(data, expected.null = variable * null.prob,
std.dev.null = sqrt(expected.null * (1 - null.prob)),
residual = variable - expected.null,
std.residual = residual / std.dev.null)
# Decreasing order data by std.residual
#ordered = data[order(-data$std.residual), ]
return(data.frame(arrange(data, desc(std.residual))))
}
# fill in
# Initial function call
top.15.crimes = find.std.residual(county.data, county.data$violent.crimes, 0.01)[1:15, ]
# Retrieving only the top 15 records in decreasing crime rate order
#top.15.crimes = top.15.crimes[order(-top.15.crimes$violent.crimes)[1:15], ]
#top.15.crimes
# fill in
# Initial function call
top.15.crimes = find.std.residual(county.data, county.data$violent.crimes, 0.01)[1:15, ]
# Retrieving only the top 15 records in decreasing crime rate order
#top.15.crimes = top.15.crimes[order(-top.15.crimes$violent.crimes)[1:15], ]
top.15.crimes
# fill in
# Code taken from Exercise 6 solution
map.std.residual = function(county.gg, county.data) {
#map.rate = with(county.data, sum(violent.crimes) / sum(population))
#county.mapdata = merge(county.gg, county.data, by.x = 'fips', by.y='STCOU')
#county.mapdata = arrange(county.mapdata, order)
#ggplot(data = county.mapdata, mapping = aes(x = long, y = lat, group = group, fill = violent.crimes)) +
#geom_polygon() +
#coord_map() +
#labs(fill = 'Violent Crime Rate', title='Violent Crimes') +
#coord_map() +
#scale_fill_gradient2(low = 'grey', high = 'red', mid = 'grey', midpoint = map.rate)
US.per.capita = sum(county.data$violent.crimes) / sum(county.data$population)
county.merge = merge(x = county.gg, y = county.data, by.x = "fips", by.y = "STCOU")
county.merge = arrange(county.merge, order)
county_list = map_data("county")
ggplot() +
geom_map(data = county_list, map = county_list, mapping = aes(x = long, y = lat, map_id = region), col = "white", fill = "grey") +
geom_polygon(data - county.merge, mapping = aes(x = long, y = lat, group = group, fill = std.residual)) +
coord_map() +
labs(x = "Longitude", y = "Latitude", fill = "Standard Residual", group = "Counties", title = "Top 15 Counties \n with High Standard Residual") +
scale_fill_gradientn(limits = c(0, 4000), colours = c("grey", "violet", "blue"), breaks = c(0, 1000, 2000, 3000, 4000))
}
# Calling the mapping function with the top 15 crimes
map.std.residual(county.gg, top.15.crimes)
# fill in
# Getting the Violent Crime per Capita Rate
crime.rate = sum(county.data$violent.crimes) / sum(county.data$population)
# Passing the crime rate as the null hypothesis
map.std.residual(county.gg, find.std.residual(county.data, county.data$violent.crimes, crime.rate))
# fill in
# Initial function call
top.15.crimes = find.std.residual(county.data, county.data$violent.crimes, 0.01)[1:15, ]
# Retrieving only the top 15 records in decreasing crime rate order
#top.15.crimes = top.15.crimes[order(-top.15.crimes$violent.crimes)[1:15], ]
kable(top.15.crimes, digits = 4)
top.15.crimes
# fill in
# Code taken from Exercise 6 solution
map.std.residual = function(county.gg, county.data) {
#map.rate = with(county.data, sum(violent.crimes) / sum(population))
#county.mapdata = merge(county.gg, county.data, by.x = 'fips', by.y='STCOU')
#county.mapdata = arrange(county.mapdata, order)
#ggplot(data = county.mapdata, mapping = aes(x = long, y = lat, group = group, fill = violent.crimes)) +
#geom_polygon() +
#coord_map() +
#labs(fill = 'Violent Crime Rate', title='Violent Crimes') +
#coord_map() +
#scale_fill_gradient2(low = 'grey', high = 'red', mid = 'grey', midpoint = map.rate)
US.per.capita = sum(county.data$violent.crimes) / sum(county.data$population)
county.merge = merge(x = county.gg, y = county.data, by.x = "fips", by.y = "STCOU")
county.merge = arrange(county.merge, order)
county_list = map_data("county")
ggplot() +
geom_map(data = county_list, map = county_list, mapping = aes(x = long, y = lat, map_id = region), col = "white", fill = "grey") +
geom_polygon(data - county.merge, mapping = aes(x = long, y = lat, group = group, fill = std.residual)) +
coord_map() +
labs(x = "Longitude", y = "Latitude", fill = "Standard Residual", group = "Counties", title = "Top 15 Counties \n with High Standard Residual") +
scale_fill_gradientn(limits = c(0, 4000), colours = c("grey", "violet", "blue"), breaks = c(0, 1000, 2000, 3000, 4000))
}
# Calling the mapping function with the top 15 crimes
map.std.residual(county.gg, top.15.crimes)
# fill in
# Code taken from Exercise 6 solution
# Creation of the map.std.residual function with 2 parameters which are county.gg, county.data
map.std.residual = function(county.gg, county.data) {
# Getting the US.per.capita by dividing the sum of violent.crimes to population
US.per.capita = sum(county.data$violent.crimes) / sum(county.data$population)
# Merging of the 2 data frames by the columns fips and STCOU
county.merge = merge(x = county.gg, y = county.data, by.x = "fips", by.y = "STCOU")
# Arranging the data frame county.merge according to order number
county.merge = arrange(county.merge, order)
#starting of data map_data
county_list = map_data("county")
# ggplot automatically return value of the map.std.residual function that creates the map
ggplot() + geom_map(data = county_list, map = county_list, mapping = aes(x = long, y = lat, map_id = region), col = "white", fill = "grey") + geom_polygon(data = county.merge, mapping = aes(x = long, y = lat, group = group, fill = std.residual)) + coord_map() + labs(x = "Longitude", y = "Latitude", fill = "Standard Residual", group = "Counties", title = "Top 15 Counties \n with High Standard Residual") + scale_fill_gradientn(limits = c(0,4000), colours=c("grey", "violet", "blue"), breaks=c(0, 1000 , 2000, 3000, 4000)
)
}
# Running the function with the appropriate data sets and adding some styles to the created map
map.std.residual(county.gg, top.15.crimes)
# fill in
# Getting the Violent Crime per Capita Rate
crime.rate = sum(county.data$violent.crimes) / sum(county.data$population)
# Passing the crime rate as the null hypothesis
map.std.residual(county.gg, find.std.residual(county.data, county.data$violent.crimes, crime.rate))
# fill in
# Getting the Violent Crime per Capita Rate
crime.rate.per.capita = sum(county.data$violent.crimes) / sum(county.data$population)
#US.crime.per.capita = data.frame(find.std.residual(county.data, county.data$violent.crimes, crime.rate.per.capita))
# Passing the crime rate as the null hypothesis
map.std.residual(county.gg, find.std.residual(county.data, county.data$violent.crimes,  crime.rate.per.capita))
# fill in
# Getting the Violent Crime per Capita Rate
crime.rate.per.capita = sum(county.data$violent.crimes) / sum(county.data$population)
#US.crime.per.capita = data.frame(find.std.residual(county.data, county.data$violent.crimes, crime.rate.per.capita))
# Passing the crime rate as the null hypothesis
map.std.residual(county.gg, find.std.residual(county.data, county.data$violent.crimes,  crime.rate.per.capita)[1:15,])

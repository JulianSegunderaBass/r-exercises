count = rowSums(movies[, 18:24])
# Conditional checking for each record
# count == 1 means a movie is part of one genre
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
genre[which(count > 1)] = "Multi-Genre"
movies$genre = as.factor(genre)
# standard ggplot with stat_summary to allow the use of geom_smooth line
# grouping graphs according to genre
ggplot(movies, mapping = aes(x = year, y = rating, color = rating)) +
stat_summary(fun = mean, geom = "line", size = 0.8) +
geom_smooth(color = "red") +
facet_wrap(~ genre)
# qplot which groups according to genre
qplot(sample = rating, data = movies, color=genre)
# fill in
# Re-assigning movies to remove null entries
movies = na.omit(movies)
# Repeat function repeats as many as the total rows in movies
genre = rep(NA, nrow(movies))
# Getting the sum of the binary row values for each movie across the different genres
# 18:24 represents the columns for the genres
# For context, if the sum is greater than 1, the movie is part of multiple genres
count = rowSums(movies[, 18:24])
# Conditional checking for each record
# count == 1 means a movie is part of one genre
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
genre[which(count > 1)] = "Multi-Genre"
movies$genre = as.factor(genre)
# standard ggplot with stat_summary to allow the use of geom_smooth line
# grouping graphs according to genre
ggplot(movies, mapping = aes(x = year, y = rating, color = rating)) +
stat_summary(fun = mean, geom = "line", size = 0.8) +
geom_smooth(color = "red") +
facet_wrap(~ genre)
# qplot which groups according to genre
qplot(sample = rating, data = movies, color=genre)
# fill in
movies.1900.1920 = subset(movies, year >= 1900 & year <= 1920)
movies.1921.1940 = subset(movies, year >= 1921 & year <= 1940)
movies.1941.1960 = subset(movies, year >= 1941 & year <= 1960)
movies.1961.1980 = subset(movies, year >= 1961 & year <= 1980)
movies.1981.2000 = subset(movies, year >= 1981 & year <= 2000)
plotYears = function(data) {
qplot(sample = rating, data = data, color=genre)
}
plotYears(movies.1900.1920)
# fill in
movies.1900.1920 = subset(movies, year >= 1900 & year <= 1920)
movies.1921.1940 = subset(movies, year >= 1921 & year <= 1940)
movies.1941.1960 = subset(movies, year >= 1941 & year <= 1960)
movies.1961.1980 = subset(movies, year >= 1961 & year <= 1980)
movies.1981.2000 = subset(movies, year >= 1981 & year <= 2000)
plotYears = function(data) {
qplot(sample = rating, data = data, color=genre, geom = "line")
}
plotYears(movies.1900.1920)
# fill in
movies.1900.1920 = subset(movies, year >= 1900 & year <= 1920)
movies.1921.1940 = subset(movies, year >= 1921 & year <= 1940)
movies.1941.1960 = subset(movies, year >= 1941 & year <= 1960)
movies.1961.1980 = subset(movies, year >= 1961 & year <= 1980)
movies.1981.2000 = subset(movies, year >= 1981 & year <= 2000)
plotYears = function(data) {
qplot(sample = rating, data = data, aes(x = year, y = rating), color=genre, geom = "line")
}
plotYears(movies.1900.1920)
# fill in
movies.1900.1920 = subset(movies, year >= 1900 & year <= 1920)
movies.1921.1940 = subset(movies, year >= 1921 & year <= 1940)
movies.1941.1960 = subset(movies, year >= 1941 & year <= 1960)
movies.1961.1980 = subset(movies, year >= 1961 & year <= 1980)
movies.1981.2000 = subset(movies, year >= 1981 & year <= 2000)
plotYears = function(data) {
qplot(sample = rating, data = data, aes(x = year, y = rating), color=genre)
}
plotYears(movies.1900.1920)
# fill in
movies.1900.1920 = subset(movies, year >= 1900 & year <= 1920)
movies.1921.1940 = subset(movies, year >= 1921 & year <= 1940)
movies.1941.1960 = subset(movies, year >= 1941 & year <= 1960)
movies.1961.1980 = subset(movies, year >= 1961 & year <= 1980)
movies.1981.2000 = subset(movies, year >= 1981 & year <= 2000)
plotYears = function(data) {
qplot(sample = rating, data = data, color=genre)
}
plotYears(movies.1900.1920)
# fill in
movies.1900.1920 = subset(movies, year >= 1900 & year <= 1920)
movies.1921.1940 = subset(movies, year >= 1921 & year <= 1940)
movies.1941.1960 = subset(movies, year >= 1941 & year <= 1960)
movies.1961.1980 = subset(movies, year >= 1961 & year <= 1980)
movies.1981.2000 = subset(movies, year >= 1981 & year <= 2000)
plotYears = function(data) {
qplot(sample = rating, data = data, color=genre) + facet_wrap(~ genre)
}
plotYears(movies.1900.1920)
# fill in
#movies.1900.1920 = subset(movies, year >= 1900 & year <= 1920)
#movies.1921.1940 = subset(movies, year >= 1921 & year <= 1940)
#movies.1941.1960 = subset(movies, year >= 1941 & year <= 1960)
#movies.1961.1980 = subset(movies, year >= 1961 & year <= 1980)
#movies.1981.2000 = subset(movies, year >= 1981 & year <= 2000)
#movies.1900.1920 = ifelse(movies$year >= 1900 & year <= 1920, "1900-1920")
#movies.1921.1940 = subset(movies$year >= 1921 & year <= 1940, "1921-1940")
#movies.1941.1960 = subset(movies$year >= 1941 & year <= 1960, "1941-1960")
#movies.1961.1980 = subset(movies$year >= 1961 & year <= 1980, "1961-1980")
#movies.1981.2000 = subset(movies$year >= 1981 & year <= 2000, "1981-2000")
plotYears = function(data) {
qplot(sample = rating, data = data, color=genre) + facet_wrap(~ genre + (year >= 1980))
}
plotYears(movies)
# fill in
#movies.1900.1920 = subset(movies, year >= 1900 & year <= 1920)
#movies.1921.1940 = subset(movies, year >= 1921 & year <= 1940)
#movies.1941.1960 = subset(movies, year >= 1941 & year <= 1960)
#movies.1961.1980 = subset(movies, year >= 1961 & year <= 1980)
#movies.1981.2000 = subset(movies, year >= 1981 & year <= 2000)
#movies.1900.1920 = ifelse(movies$year >= 1900 & year <= 1920, "1900-1920")
#movies.1921.1940 = subset(movies$year >= 1921 & year <= 1940, "1921-1940")
#movies.1941.1960 = subset(movies$year >= 1941 & year <= 1960, "1941-1960")
#movies.1961.1980 = subset(movies$year >= 1961 & year <= 1980, "1961-1980")
#movies.1981.2000 = subset(movies$year >= 1981 & year <= 2000, "1981-2000")
test = year >= 1980
# fill in
#movies.1900.1920 = subset(movies, year >= 1900 & year <= 1920)
#movies.1921.1940 = subset(movies, year >= 1921 & year <= 1940)
#movies.1941.1960 = subset(movies, year >= 1941 & year <= 1960)
#movies.1961.1980 = subset(movies, year >= 1961 & year <= 1980)
#movies.1981.2000 = subset(movies, year >= 1981 & year <= 2000)
#movies.1900.1920 = ifelse(movies$year >= 1900 & year <= 1920, "1900-1920")
#movies.1921.1940 = subset(movies$year >= 1921 & year <= 1940, "1921-1940")
#movies.1941.1960 = subset(movies$year >= 1941 & year <= 1960, "1941-1960")
#movies.1961.1980 = subset(movies$year >= 1961 & year <= 1980, "1961-1980")
#movies.1981.2000 = subset(movies$year >= 1981 & year <= 2000, "1981-2000")
test = movies$year >= 1980
plotYears = function(data) {
qplot(sample = rating, data = data, color=genre) + facet_wrap(~ genre + test)
}
plotYears(movies)
# fill in
#movies.1900.1920 = subset(movies, year >= 1900 & year <= 1920)
#movies.1921.1940 = subset(movies, year >= 1921 & year <= 1940)
#movies.1941.1960 = subset(movies, year >= 1941 & year <= 1960)
#movies.1961.1980 = subset(movies, year >= 1961 & year <= 1980)
#movies.1981.2000 = subset(movies, year >= 1981 & year <= 2000)
#movies.1900.1920 = ifelse(movies$year >= 1900 & year <= 1920, "1900-1920")
#movies.1921.1940 = subset(movies$year >= 1921 & year <= 1940, "1921-1940")
#movies.1941.1960 = subset(movies$year >= 1941 & year <= 1960, "1941-1960")
#movies.1961.1980 = subset(movies$year >= 1961 & year <= 1980, "1961-1980")
#movies.1981.2000 = subset(movies$year >= 1981 & year <= 2000, "1981-2000")
plotYears = function(data) {
qplot(sample = rating, data = data, color=genre) + facet_wrap(~ genre + (year >= 1980))
}
plotYears(movies)
# fill in
#movies.1900.1920 = subset(movies, year >= 1900 & year <= 1920)
#movies.1921.1940 = subset(movies, year >= 1921 & year <= 1940)
#movies.1941.1960 = subset(movies, year >= 1941 & year <= 1960)
#movies.1961.1980 = subset(movies, year >= 1961 & year <= 1980)
#movies.1981.2000 = subset(movies, year >= 1981 & year <= 2000)
movies.years.groupings = ifelse(movies$year >= 1900 & year <= 1920, "1900-1920",
movies$year >= 1921 & year <= 1940, "1921-1940",
movies$year >= 1941 & year <= 1960, "1941-1960",
movies$year >= 1961 & year <= 1980, "1961-1980",
movies$year >= 1981 & year <= 2000, "1981-2000")
# fill in
movies.1900.1920 = subset(movies, year >= 1900 & year <= 1920)
movies.1921.1940 = subset(movies, year >= 1921 & year <= 1940)
movies.1941.1960 = subset(movies, year >= 1941 & year <= 1960)
movies.1961.1980 = subset(movies, year >= 1961 & year <= 1980)
movies.1981.2000 = subset(movies, year >= 1981 & year <= 2000)
year.vector = c(movies.1900.1920, movies.1921.1940, movies.1941.1960, movies.1961.1980, movies.1981.2000)
#movies.years.groupings = ifelse(movies$year >= 1900 & year <= 1920, "1900-1920",
# movies$year >= 1921 & year <= 1940, "1921-1940",
# movies$year >= 1941 & year <= 1960, "1941-1960",
# movies$year >= 1961 & year <= 1980, "1961-1980",
# movies$year >= 1981 & year <= 2000, "1981-2000")
#movies.1921.1940 = subset(movies$year >= 1921 & year <= 1940, "1921-1940")
#movies.1941.1960 = subset(movies$year >= 1941 & year <= 1960, "1941-1960")
#movies.1961.1980 = subset(movies$year >= 1961 & year <= 1980, "1961-1980")
#movies.1981.2000 = subset(movies$year >= 1981 & year <= 2000, "1981-2000")
plotYears = function(data) {
qplot(sample = rating, data = data, color=genre) + facet_wrap(~ year.vector)
}
plotYears(movies)
# fill in
movies.1900.1920 = subset(movies, year >= 1900 & year <= 1920)
movies.1921.1940 = subset(movies, year >= 1921 & year <= 1940)
movies.1941.1960 = subset(movies, year >= 1941 & year <= 1960)
movies.1961.1980 = subset(movies, year >= 1961 & year <= 1980)
movies.1981.2000 = subset(movies, year >= 1981 & year <= 2000)
plotYears = function(data) {
qplot(sample = rating, data = data, color=genre) + facet_wrap(~ genre)
}
plotYears(movies.1900.1920)
# fill in
movies.1900.1920 = subset(movies, year >= 1900 & year <= 1920)
movies.1921.1940 = subset(movies, year >= 1921 & year <= 1940)
movies.1941.1960 = subset(movies, year >= 1941 & year <= 1960)
movies.1961.1980 = subset(movies, year >= 1961 & year <= 1980)
movies.1981.2000 = subset(movies, year >= 1981 & year <= 2000)
plotYears = function(data) {
qplot(sample = rating, data = data, color=genre) + facet_wrap(~ genre + (year >= 1900) + (year >= 1950))
}
plotYears(movies.1900.1920)
# fill in
movies.1900.1920 = subset(movies, year >= 1900 & year <= 1920)
movies.1921.1940 = subset(movies, year >= 1921 & year <= 1940)
movies.1941.1960 = subset(movies, year >= 1941 & year <= 1960)
movies.1961.1980 = subset(movies, year >= 1961 & year <= 1980)
movies.1981.2000 = subset(movies, year >= 1981 & year <= 2000)
plotYears = function(data) {
qplot(sample = rating, data = data, color=genre) + facet_wrap(~ genre )
}
plotYears(movies.1900.1920)
# fill in
movies.1900.1920 = subset(movies, year >= 1900 & year <= 1920)
movies.1921.1940 = subset(movies, year >= 1921 & year <= 1940)
movies.1941.1960 = subset(movies, year >= 1941 & year <= 1960)
movies.1961.1980 = subset(movies, year >= 1961 & year <= 1980)
movies.1981.2000 = subset(movies, year >= 1981 & year <= 2000)
plotYears = function(data) {
qplot(sample = rating, data = data, color=genre, geom=c("point", "line")) + facet_wrap(~ genre )
}
plotYears(movies.1900.1920)
# fill in
movies.1900.1920 = subset(movies, year >= 1900 & year <= 1920)
movies.1921.1940 = subset(movies, year >= 1921 & year <= 1940)
movies.1941.1960 = subset(movies, year >= 1941 & year <= 1960)
movies.1961.1980 = subset(movies, year >= 1961 & year <= 1980)
movies.1981.2000 = subset(movies, year >= 1981 & year <= 2000)
plotYears = function(data, year, rating) {
qplot(data, x = year, y = rating, geom=c("point", "line")) + facet_wrap(~ genre )
}
plotYears(movies.1900.1920, movies.1900.1920$year, movies.1900.1920$rating)
# fill in
movies.1900.1920 = subset(movies, year >= 1900 & year <= 1920)
movies.1921.1940 = subset(movies, year >= 1921 & year <= 1940)
movies.1941.1960 = subset(movies, year >= 1941 & year <= 1960)
movies.1961.1980 = subset(movies, year >= 1961 & year <= 1980)
movies.1981.2000 = subset(movies, year >= 1981 & year <= 2000)
plotYears = function(data, year, rating) {
qplot(data, aes(x = year, y = rating), geom=c("point", "line")) + facet_wrap(~ genre )
}
plotYears(movies.1900.1920, movies.1900.1920$year, movies.1900.1920$rating)
# fill in
movies.1900.1920 = subset(movies, year >= 1900 & year <= 1920)
movies.1921.1940 = subset(movies, year >= 1921 & year <= 1940)
movies.1941.1960 = subset(movies, year >= 1941 & year <= 1960)
movies.1961.1980 = subset(movies, year >= 1961 & year <= 1980)
movies.1981.2000 = subset(movies, year >= 1981 & year <= 2000)
plotYears = function(data, year, rating) {
qplot(data, aes(x = year, y = rating), geom=c("point", "line"))
}
plotYears(movies.1900.1920, movies.1900.1920$year, movies.1900.1920$rating)
# fill in
# Re-assigning movies to remove null entries
movies = na.omit(movies)
# Repeat function repeats as many as the total rows in movies
genre = rep(NA, nrow(movies))
# Getting the sum of the binary row values for each movie across the different genres
# 18:24 represents the columns for the genres
# For context, if the sum is greater than 1, the movie is part of multiple genres
count = rowSums(movies[, 18:24])
# Conditional checking for each record
# count == 1 means a movie is part of one genre
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
genre[which(count > 1)] = "Multi-Genre"
movies$genre = as.factor(genre)
# standard ggplot with stat_summary to allow the use of geom_smooth line
# grouping graphs according to genre
ggplot(movies, mapping = aes(x = year, y = rating, color = rating)) +
stat_summary(fun = mean, geom = "line", size = 0.8) +
geom_smooth(color = "red") +
facet_wrap(~ genre)
# qplot which groups according to genre
qplot(sample = log.rating, data = movies, color=genre)
# fill in
# Re-assigning movies to remove null entries
movies = na.omit(movies)
# Repeat function repeats as many as the total rows in movies
genre = rep(NA, nrow(movies))
# Getting the sum of the binary row values for each movie across the different genres
# 18:24 represents the columns for the genres
# For context, if the sum is greater than 1, the movie is part of multiple genres
count = rowSums(movies[, 18:24])
# Conditional checking for each record
# count == 1 means a movie is part of one genre
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
genre[which(count > 1)] = "Multi-Genre"
movies$genre = as.factor(genre)
# standard ggplot with stat_summary to allow the use of geom_smooth line
# grouping graphs according to genre
ggplot(movies, mapping = aes(x = year, y = rating, color = rating)) +
stat_summary(fun = mean, geom = "line", size = 0.8) +
geom_smooth(color = "red") +
facet_wrap(~ genre)
# qplot which groups according to genre
qplot(sample = rating, data = movies, color=genre)
# fill in
movies.1900.1920 = subset(movies, year >= 1900 & year <= 1920)
movies.1921.1940 = subset(movies, year >= 1921 & year <= 1940)
movies.1941.1960 = subset(movies, year >= 1941 & year <= 1960)
movies.1961.1980 = subset(movies, year >= 1961 & year <= 1980)
movies.1981.2000 = subset(movies, year >= 1981 & year <= 2000)
plotYears = function(data) {
qplot(sample = rating, data = data, color=genre) + facet_wrap(~ genre )
}
plotYears(movies.1900.1920)
# fill in
movies.1900.1920 = subset(movies, year >= 1900 & year <= 1920)
movies.1921.1940 = subset(movies, year >= 1921 & year <= 1940)
movies.1941.1960 = subset(movies, year >= 1941 & year <= 1960)
movies.1961.1980 = subset(movies, year >= 1961 & year <= 1980)
movies.1981.2000 = subset(movies, year >= 1981 & year <= 2000)
plotYears = function(data) {
qplot(sample = log(rating), data = data, color=genre) + facet_wrap(~ genre )
}
plotYears(movies.1900.1920)
# fill in
movies.1900.1920 = subset(movies, year >= 1900 & year <= 1920)
movies.1921.1940 = subset(movies, year >= 1921 & year <= 1940)
movies.1941.1960 = subset(movies, year >= 1941 & year <= 1960)
movies.1961.1980 = subset(movies, year >= 1961 & year <= 1980)
movies.1981.2000 = subset(movies, year >= 1981 & year <= 2000)
plotYears = function(data) {
qplot(sample = rating, data = data, color=genre) + facet_wrap(~ genre )
}
plotYears(movies.1900.1920)
# fill in
movies.1900.1920 = subset(movies, year >= 1900 & year <= 1920)
movies.1921.1940 = subset(movies, year >= 1921 & year <= 1940)
movies.1941.1960 = subset(movies, year >= 1941 & year <= 1960)
movies.1961.1980 = subset(movies, year >= 1961 & year <= 1980)
movies.1981.2000 = subset(movies, year >= 1981 & year <= 2000)
plotYears = function(data) {
qplot(sample = log(rating), data = data, color=genre) + facet_wrap(~ genre )
}
plotYears(movies.1900.1920)
# fill in
# Re-assigning movies to remove null entries
movies = na.omit(movies)
# Repeat function repeats as many as the total rows in movies
genre = rep(NA, nrow(movies))
# Getting the sum of the binary row values for each movie across the different genres
# 18:24 represents the columns for the genres
# For context, if the sum is greater than 1, the movie is part of multiple genres
count = rowSums(movies[, 18:24])
# Conditional checking for each record
# count == 1 means a movie is part of one genre
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
genre[which(count > 1)] = "Multi-Genre"
movies$genre = as.factor(genre)
# standard ggplot with stat_summary to allow the use of geom_smooth line
# grouping graphs according to genre
ggplot(movies, mapping = aes(x = year, y = rating, color = rating)) +
stat_summary(fun = mean, geom = "line", size = 0.8) +
geom_smooth(color = "red") +
facet_wrap(~ genre)
# qplot which groups according to genre
qplot(sample = log.rating, data = movies, size=genre)
# fill in
# Re-assigning movies to remove null entries
movies = na.omit(movies)
# Repeat function repeats as many as the total rows in movies
genre = rep(NA, nrow(movies))
# Getting the sum of the binary row values for each movie across the different genres
# 18:24 represents the columns for the genres
# For context, if the sum is greater than 1, the movie is part of multiple genres
count = rowSums(movies[, 18:24])
# Conditional checking for each record
# count == 1 means a movie is part of one genre
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
genre[which(count > 1)] = "Multi-Genre"
movies$genre = as.factor(genre)
# standard ggplot with stat_summary to allow the use of geom_smooth line
# grouping graphs according to genre
ggplot(movies, mapping = aes(x = year, y = rating, color = rating)) +
stat_summary(fun = mean, geom = "line", size = 0.8) +
geom_smooth(color = "red") +
facet_wrap(~ genre)
# qplot which groups according to genre
qplot(sample = log.rating, data = movies, size=genre, color=genre)
# fill in
# Re-assigning movies to remove null entries
movies = na.omit(movies)
# Repeat function repeats as many as the total rows in movies
genre = rep(NA, nrow(movies))
# Getting the sum of the binary row values for each movie across the different genres
# 18:24 represents the columns for the genres
# For context, if the sum is greater than 1, the movie is part of multiple genres
count = rowSums(movies[, 18:24])
# Conditional checking for each record
# count == 1 means a movie is part of one genre
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
genre[which(count > 1)] = "Multi-Genre"
movies$genre = as.factor(genre)
# standard ggplot with stat_summary to allow the use of geom_smooth line
# grouping graphs according to genre
ggplot(movies, mapping = aes(x = year, y = rating, color = rating)) +
stat_summary(fun = mean, geom = "line", size = 0.8) +
geom_smooth(color = "red") +
facet_wrap(~ genre)
# qplot which groups according to genre
qplot(sample = log.rating, data = movies, color=genre)
# fill in
library(ggplot2movies)
# if else statement to create two year categories splitting before and after 1930
movies$year.groupings = ifelse(movies$year >= 1930, "1930 and Beyond", "Before 1930")
# log transform for movie rating column
movies$log.rating = log(movies$rating)
# plotting log rating data according to year and grouping by year categories
# geom_line is added to color years according to 1930 split
# stat_summary adds average ratings point in black for each year
ggplot(movies, aes(x = year, y = log.rating)) +
geom_line(aes(size = factor(year >= 1930))) +
stat_summary(fun.data = mean_cl_boot, geom = "point", color = "black") +
facet_wrap(~ year.groupings, nrow = 2)
# fill in
library(ggplot2movies)
# if else statement to create two year categories splitting before and after 1930
movies$year.groupings = ifelse(movies$year >= 1930, "1930 and Beyond", "Before 1930")
# log transform for movie rating column
movies$log.rating = log(movies$rating)
# plotting log rating data according to year and grouping by year categories
# geom_line is added to color years according to 1930 split
# stat_summary adds average ratings point in black for each year
ggplot(movies, aes(x = year, y = log.rating)) +
geom_line(aes(color = factor(year >= 1930))) +
stat_summary(fun.data = mean_cl_boot, geom = "point", color = "black") +
facet_wrap(~ year.groupings, nrow = 2)
# fill in
# log transform for housing expenditures column being stored in "log.housing"
apartments.and.homes$log.housing = log(apartments.and.homes$housing)
# plotting with log housing expenditures data, grouping by category and coloring by home type
qplot(sample = log.housing, data = apartments.and.homes, color=home.type, size = home.type) + facet_wrap(~ categories)
# fill in
# log transform for housing expenditures column being stored in "log.housing"
apartments.and.homes$log.housing = log(apartments.and.homes$housing)
# plotting with log housing expenditures data, grouping by category and coloring by home type
qplot(sample = log.housing, data = apartments.and.homes, color=home.type) + facet_wrap(~ categories)
# fill in
#movies.1900.1920 = subset(movies, year >= 1900 & year <= 1920)
#movies.1921.1940 = subset(movies, year >= 1921 & year <= 1940)
#movies.1941.1960 = subset(movies, year >= 1941 & year <= 1960)
#movies.1961.1980 = subset(movies, year >= 1961 & year <= 1980)
#movies.1981.2000 = subset(movies, year >= 1981 & year <= 2000)
movies = mutate(movies, year.group = )
# fill in
#movies.1900.1920 = subset(movies, year >= 1900 & year <= 1920)
#movies.1921.1940 = subset(movies, year >= 1921 & year <= 1940)
#movies.1941.1960 = subset(movies, year >= 1941 & year <= 1960)
#movies.1961.1980 = subset(movies, year >= 1961 & year <= 1980)
#movies.1981.2000 = subset(movies, year >= 1981 & year <= 2000)
#movies = mutate(movies, year.group = )
plotYears = function(data) {
qplot(sample = log(rating), data = data, color=genre) + facet_wrap(genre ~ genre )
}
plotYears(movies.1900.1920)
# fill in
#movies.1900.1920 = subset(movies, year >= 1900 & year <= 1920)
#movies.1921.1940 = subset(movies, year >= 1921 & year <= 1940)
#movies.1941.1960 = subset(movies, year >= 1941 & year <= 1960)
#movies.1961.1980 = subset(movies, year >= 1961 & year <= 1980)
#movies.1981.2000 = subset(movies, year >= 1981 & year <= 2000)
#movies = mutate(movies, year.group = )
plotYears = function(data) {
qplot(sample = log(rating), data = data, color=genre) + facet_wrap((year > 1920) ~ genre )
}
plotYears(movies.1900.1920)

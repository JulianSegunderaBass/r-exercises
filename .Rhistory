county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(violent.crimes))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=population, y=per.capita)) + geom_point() + geom_smooth() + ggtitle("Violent Crimes by Population") + scale_x_log10() + scale_y_log10()
# fill in
CI.data = with(county.data, binom.confint(x = violent.crimes, n = population, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(violent.crimes))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=population, y=per.capita)) + geom_point() + geom_smooth() + ggtitle("Violent Crimes by Population") + scale_x_log10()
# fill in
CI.data = with(county.data, binom.confint(x = violent.crimes, n = population, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(violent.crimes))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=population, y=per.capita)) + geom_point() + geom_smooth() + ggtitle("Violent Crimes by Population")
# fill in
CI.data = with(county.data, binom.confint(x = violent.crimes, n = population, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(violent.crimes))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=population, y=per.capita)) + geom_point() + geom_smooth() + ggtitle("Violent Crimes by Population") + scale_x_log10()
# fill in
CI.data = with(county.data, binom.confint(x = violent.crimes, n = population, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(violent.crimes))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=population, y=per.capita)) + geom_point() + geom_smooth() + ggtitle("Violent Crimes by Population")
# fill in
CI.data = with(county.data, binom.confint(x = violent.crimes, n = population, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(violent.crimes))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=population, y=per.capita)) + geom_point() + geom_smooth() + ggtitle("Violent Crimes by Population") + scale_x_log10()
# fill in
per.capita.scatterplot = function(x, n) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", n, x, "per.capita",   "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle("Violent Crimes by Population") + scale_x_log10()
}
per.capita.scatterplot(county.data$violent.crimes, county.data$population)
library(ggplot2)
library(plyr)
library(reshape2)
library(knitr)
library(binom)
county.data = read.csv(file = 'county_data.csv', header=TRUE)
load('county_ggplot.rda')
# fill in
per.capita.scatterplot = function(x, n) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", n, x, "per.capita",   "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle("Violent Crimes by Population") + scale_x_log10()
}
per.capita.scatterplot(county.data$violent.crimes, county.data$population)
View(county.data)
# fill in
per.capita.scatterplot = function(x, n) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", "Population", "Violent Crimes", "per.capita",   "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle("Violent Crimes by Population") + scale_x_log10()
}
per.capita.scatterplot(county.data$violent.crimes, county.data$population)
# fill in
per.capita.scatterplot = function(x, n) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle("Violent Crimes by Population") + scale_x_log10()
}
per.capita.scatterplot(county.data$violent.crimes, county.data$population)
# fill in
per.capita.scatterplot = function(x, n) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle("Violent Crimes by Population") + scale_x_log10()
}
per.capita.scatterplot(county.data$violent.crimes, county.data$population)
per.capita.scatterplot(county.data$births, county.data$population)
# fill in
per.capita.scatterplot = function(x, n, main.title) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle("Violent Crimes by Population") + scale_x_log10()
}
per.capita.scatterplot(county.data$violent.crimes, county.data$population, "Test")
per.capita.scatterplot(county.data$births, county.data$population, "Test 2")
per.capita.scatterplot(county.data$deaths, county.data$population, "Test 3")
per.capita.scatterplot(county.data$infant.deaths, county.data$population, "Test 4")
# fill in
per.capita.scatterplot = function(x, n, main.title) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle(main.title) + scale_x_log10()
}
per.capita.scatterplot(county.data$violent.crimes, county.data$population, "Test")
per.capita.scatterplot(county.data$births, county.data$population, "Test 2")
per.capita.scatterplot(county.data$deaths, county.data$population, "Test 3")
per.capita.scatterplot(county.data$infant.deaths, county.data$population, "Test 4")
# fill in
per.capita.scatterplot = function(x, n, main.title) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle(main.title) + scale_x_log10()
}
per.capita.scatterplot(county.data$violent.crimes, county.data$population, "Violent Crimes by Population")
per.capita.scatterplot(county.data$births, county.data$population, "Births by Population")
per.capita.scatterplot(county.data$deaths, county.data$population, "Deaths by Population")
per.capita.scatterplot(county.data$infant.deaths, county.data$population, "Infant Deaths by Population")
library(ggplot2)
library(plyr)
library(reshape2)
library(knitr)
library(binom)
county.data = read.csv(file = 'county_data.csv', header=TRUE)
load('county_ggplot.rda')
# fill in
# Scatterplot function that takes in a per capita column value, a function (in this case population) and a plot title
per.capita.scatterplot = function(x, n, main.title) {
CI.data = with(county.data, binom.confint(x = x, n = n, methods = 'exact'))
county.augment = with(CI.data,
mutate(county.data,
lower.CI = lower, upper.CI = upper, per.capita = mean))
kable( arrange(county.augment, desc(x))[, c("name", "population", "violent.crimes", "per.capita", "lower.CI")], digits=4)
ggplot(county.augment, aes(x=n, y=per.capita)) + geom_point() + geom_smooth() + ggtitle(main.title) +  scale_x_log10()
}
# Violent Crimes by Population
per.capita.scatterplot(county.data$violent.crimes, county.data$population, "Violent Crimes by Population")
# Births by Population
per.capita.scatterplot(county.data$births, county.data$population, "Births by Population")
# Deaths by Population
per.capita.scatterplot(county.data$deaths, county.data$population, "Deaths by Population")
# Infant Deaths by Population
per.capita.scatterplot(county.data$infant.deaths, county.data$population, "Infant Deaths by Population")
# fill in
find.std.residual = function(data, variable, null.prob) {
null.prob = null.prob / 100
data = mutate(data, expected.null = variable * null.prob,
std.dev.null = sqrt(expected.null * (1 - null.prob)),
residual = variable - expected.null,
std.residual = residual / std.dev.null)
# Decreasing order data by std.residual
ordered = data[order(-data$std.residual), ]
return (ordered)
}
# fill in
# Initial function call
top.15.crimes = find.std.residual(county.data, county.data$violent.crimes, 1)
# Retrieving only the top 15 records in decreasing crime rate order
top.15.crimes = top.15.crimes[order(-top.15.crimes$violent.crimes)[1:15], ]
top.15.crimes
# fill in
# Code taken from Exercise 6 solution
map.std.residual = function(county.gg, county.data) {
map.rate = with(county.data, sum(violent.crimes) / sum(population))
county.mapdata = merge(county.gg, county.data, by.x = 'fips', by.y='STCOU')
county.mapdata = arrange(county.mapdata, order)
ggplot(data = county.mapdata, mapping = aes(x = long, y = lat, group = group, fill = violent.crimes)) +
geom_polygon() +
coord_map() +
labs(fill = 'Violent Crime Rate', title='Violent Crimes') +
coord_map() +
scale_fill_gradient2(low = 'grey', high = 'red', mid = 'grey', midpoint = map.rate)
}
# Calling the mapping function with the top 15 crimes
map.std.residual(county.gg, top.15.crimes)
# fill in
# Getting the Violent Crime per Capita Rate
crime.rate = sum(county.data$violent.crimes) / sum(county.data$population)
# Passing the crime rate as the null hypothesis
map.std.residual(county.gg, find.std.residual(county.data, county.data$violent.crimes, crime.rate))
library(plyr)
library(ggplot2)
library(reshape2)
expenditures = read.csv(file = 'dataset_hw4.csv', header = TRUE)
# fill in
# Subset for home categories
apartments.and.homes = subset(expenditures, home.type == "apartment or flat" | home.type == "high-rise" | home.type == "single family detached")
qplot(sample = housing, data = apartments.and.homes, color=home.type) + facet_wrap(~ home.type)
# fill in
qplot(sample = housing, data = apartments.and.homes, color=home.type) +
facet_wrap(~ (housing > 5000) + home.type)
View(expenditures)
# fill in
positive.housing = subset(expenditures, housing < 0)
qplot(sample = housing, data = apartments.and.homes, color=home.type) +
facet_wrap(~ (housing > 5000) + home.type)
positive.housing
# fill in
positive.housing = subset(expenditures, housing > 0)
qplot(sample = housing, data = apartments.and.homes, color=home.type) +
facet_wrap(~ (housing > 5000) + home.type)
positive.housing
# fill in
apartments.and.homes$log.housing = log(apartments.and.homes$housing)
qplot(sample = log.housing, data = apartments.and.homes, color=home.type) +
facet_wrap(~ (housing > 5000) + home.type)
# fill in
apartments.and.homes$log.housing = log(apartments.and.homes$housing)
qplot(sample = log.housing, data = apartments.and.homes, color=home.type)
#facet_wrap(~ (housing > 5000) + home.type)
# fill in
# Subset for home categories
apartments.and.homes = subset(expenditures, home.type == "apartment or flat" | home.type == "high-rise" | home.type == "single family detached")
apartments.and.homes$categories = ifelse(apartments.and.homes$home.type == "single family detached", "homes", "apartments")
qplot(sample = housing, data = apartments.and.homes, color=home.type) + facet_wrap(~ categories)
# fill in
# Subset for home categories
apartments.and.homes = subset(expenditures, home.type == "apartment or flat" | home.type == "high-rise" | home.type == "single family detached")
apartments.and.homes$categories = ifelse(apartments.and.homes$home.type == "single family detached", "homes", "apartments")
qplot(sample = housing, data = apartments.and.homes, color=home.type) + facet_wrap(~ "categories")
library(plyr)
library(ggplot2)
library(reshape2)
expenditures = read.csv(file = 'dataset_hw4.csv', header = TRUE)
# fill in
# Subset for home categories
apartments.and.homes = subset(expenditures, home.type == "apartment or flat" | home.type == "high-rise" | home.type == "single family detached")
apartments.and.homes$categories = ifelse(apartments.and.homes$home.type == "single family detached", "homes", "apartments")
qplot(sample = housing, data = apartments.and.homes, color=home.type) + facet_wrap(~ "categories")
setwd("~/Julian Bass_College Works APC/Study From Home/anaLytic3/R/r-github")
happiness.data = read.csv(file = 'HappinessData2019.csv', header=TRUE)
View(happiness.data)
happiness.data = read.csv(file = 'HappinessData2019.csv', header=TRUE)
# Changing some column names
names(happiness.data)[10] = 'Population.2020'
names(happiness.data)[11] = 'Population.density'
names(happiness.data)[12] = 'Migrants.net'
names(happiness.data)[13] = 'Urban.pop'
View(happiness.data)
# Renaming
# Subset for Ratio Variables and Scores
scores.ratios = happiness.data[,3:9]
scores.melt = melt(scores.ratios, measure.vars = names(scores.ratios)[2:7])
library(ggplot2)
library(plyr)
library(reshape2)
library(knitr)
library(binom)
happiness.data = read.csv(file = 'HappinessData2019.csv', header=TRUE)
# Changing some column names
names(happiness.data)[10] = 'Population.2020'
names(happiness.data)[11] = 'Population.density'
names(happiness.data)[12] = 'Migrants.net'
names(happiness.data)[13] = 'Urban.pop'
# Renaming
# Subset for Ratio Variables and Scores
scores.ratios = happiness.data[,3:9]
scores.melt = melt(scores.ratios, measure.vars = names(scores.ratios)[2:7])
#ggplot(data = scores.melt, mapping=aes(sample=Score)) + stat_qq(dist='qunif') + facet_wrap(~ variable) + stat_qq(data=scores.melt["Score"], mapping=aes(sample=Score), dist='qunif', geom='line') + labs(title = "Test qplot", x='Scores', y='Scores by Ratio Variable')
ggplot(scores.melt, aes(x = Score, y = value), las = 2) +
geom_point(aes(color = value > 0.8)) +
facet_wrap(~ variable) +
labs(title = "Ratio Values According to Happiness Score", x='Scores', y='Value by Ratio Variable')
library(ggplot2)
library(plyr)
library(reshape2)
library(knitr)
library(binom)
happiness.data = read.csv(file = 'HappinessData2019.csv', header=TRUE)
# Changing some column names
names(happiness.data)[10] = 'Population.2020'
names(happiness.data)[11] = 'Population.density'
names(happiness.data)[12] = 'Migrants.net'
names(happiness.data)[13] = 'Urban.pop'
# Renaming
# Subset for Ratio Variables and Scores + melting
scores.ratios = happiness.data[,3:9]
scores.ratios.melt = melt(scores.ratios, measure.vars = names(scores.ratios)[2:7])
#ggplot(data = scores.melt, mapping=aes(sample=Score)) + stat_qq(dist='qunif') + facet_wrap(~ variable) + stat_qq(data=scores.melt["Score"], mapping=aes(sample=Score), dist='qunif', geom='line') + labs(title = "Test qplot", x='Scores', y='Scores by Ratio Variable')
ggplot(scores.ratios.melt, aes(x = Score, y = value), las = 2) +
geom_point(aes(color = value > 0.8)) +
facet_wrap(~ variable) +
labs(title = "Ratio Values According to Happiness Score", x='Scores', y='Value by Ratio Variable')
View(scores.ratios)
# Subset for Ratio Variables and Scores + melting
scores.demographics = select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop', 'World.Share')
# Subset for Ratio Variables and Scores + melting
scores.demographics = subset(happiness.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop', 'World.Share'))
View(scores.demographics)
# Subset for Ratio Variables and Scores + melting
scores.demographics = subset(happiness.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop', 'World.Share'))
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:6])
ggplot(scores.demographics.melt, aes(x = Score, y = value), las = 2) +
geom_point(aes(color = value > 0.8)) +
facet_wrap(~ variable) +
labs(title = "Demographic Information According to Happiness Score", x='Scores', y='Demographic Data')
# Subset for Ratio Variables and Scores + melting
scores.demographics = subset(happiness.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop', 'World.Share'))
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:6])
ggplot(scores.demographics.melt, aes(x = Score, y = value)) +
geom_point(aes(color = value > 0.8)) +
facet_wrap(~ variable) +
labs(title = "Demographic Information According to Happiness Score", x='Scores', y='Demographic Data')
# Subset for Ratio Variables and Scores + melting
scores.demographics = subset(happiness.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop', 'World.Share'))
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:6])
ggplot(scores.demographics.melt, aes(x = Score, y = value), las = 2) +
geom_point(aes(color = value > 0.8)) +
facet_wrap(~ variable) +
labs(title = "Demographic Information According to Happiness Score", x='Scores', y='Demographic Data')
# Subset for Ratio Variables and Scores + melting
scores.demographics = subset(happiness.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop', 'World.Share'))
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:6])
ggplot(scores.demographics.melt, sample=Score, las = 2) +
geom_point(aes(color = value > 0.8)) +
facet_wrap(~ variable) +
labs(title = "Demographic Information According to Happiness Score", x='Scores', y='Demographic Data')
# Subset for Ratio Variables and Scores + melting
scores.demographics = subset(happiness.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop', 'World.Share'))
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:6])
ggplot(scores.demographics.melt, aes(x = Score, y = value), las = 2) +
geom_point(aes(color = value > 0.8)) +
facet_wrap(~ variable) +
labs(title = "Demographic Information According to Happiness Score", x='Scores', y='Demographic Data')
# Subset for Ratio Variables and Scores + melting
scores.demographics = subset(happiness.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop', 'World.Share'))
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:6])
ggplot(scores.demographics.melt, aes(x = Score, y = value), las = 2) +
geom_point(aes(color = value > 0.8)) +
labs(title = "Demographic Information According to Happiness Score", x='Scores', y='Demographic Data')
# Subset for Ratio Variables and Scores + melting
scores.demographics = subset(happiness.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop', 'World.Share'))
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:6])
ggplot(scores.demographics.melt, aes(x = Score, y = value), las = 2) +
geom_point(aes(color = value > 0.8)) +
facet_wrap(~ variable) +
labs(title = "Demographic Information According to Happiness Score", x='Scores', y='Demographic Data')
# Subset for Ratio Variables and Scores + melting
scores.demographics = subset(happiness.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop', 'World.Share'))
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:6])
ggplot(scores.demographics.melt, aes(x = Score, y = value), las = 2) +
geom_point(aes(color = value > 0.8)) +
facet_grid(~ variable) +
labs(title = "Demographic Information According to Happiness Score", x='Scores', y='Demographic Data')
# Subset for Ratio Variables and Scores + melting
scores.demographics = subset(happiness.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop', 'World.Share'))
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:6])
ggplot(scores.demographics.melt, aes(x = Score, y = value), las = 2) +
geom_point(aes(color = value > 0.8)) +
facet_wrap(~ variable) +
labs(title = "Demographic Information According to Happiness Score", x='Scores', y='Demographic Data')
# Renaming
# Subset for Ratio Variables and Scores + melting
scores.ratios = happiness.data[,3:10]
scores.ratios.melt = melt(scores.ratios, measure.vars = names(scores.ratios)[2:7])
#ggplot(data = scores.melt, mapping=aes(sample=Score)) + stat_qq(dist='qunif') + facet_wrap(~ variable) + stat_qq(data=scores.melt["Score"], mapping=aes(sample=Score), dist='qunif', geom='line') + labs(title = "Test qplot", x='Scores', y='Scores by Ratio Variable')
ggplot(scores.ratios.melt, aes(x = Score, y = value), las = 2) +
geom_point(aes(color = value > 0.8)) +
facet_wrap(~ variable) +
labs(title = "Ratio Values According to Happiness Score", x='Scores', y='Value by Ratio Variable')
View(scores.ratios.melt)
View(scores.ratios.melt)
# Subset for Ratio Variables and Scores + melting
#scores.demographics = subset(happiness.data,
#select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop', 'World.Share'))
ggplot(scores.ratios.melt, aes(x = Population.2020, y = value), las = 2) +
geom_point(aes(color = value > 0.8)) +
facet_wrap(~ variable) +
labs(title = "Ratio Values According to Population", x='Scores', y='Value by Ratio Variable')
# Subset for Ratio Variables and Scores + melting
#scores.demographics = subset(happiness.data,
#select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop', 'World.Share'))
ggplot(scores.ratios.melt, aes(x = log(Population.2020), y = value), las = 2) +
geom_point(aes(color = value > 0.8)) +
facet_wrap(~ variable) +
labs(title = "Ratio Values According to Population", x='Scores', y='Value by Ratio Variable')
# Subset for Ratio Variables and Scores + melting
#scores.demographics = subset(happiness.data,
#select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop', 'World.Share'))
ggplot(scores.ratios.melt, aes(x = Population.2020, y = value), las = 2) +
geom_point(aes(color = value > 0.8)) +
facet_wrap(~ variable) +
labs(title = "Ratio Values According to Population", x='Population', y='Value by Ratio Variable')
# Subset for Ratio Variables and Scores + melting
#scores.demographics = subset(happiness.data,
#select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop', 'World.Share'))
ggplot(scores.ratios.melt, aes(x = log(Population.2020), y = value), las = 2) +
geom_point(aes(color = value > 0.8)) +
facet_wrap(~ variable) +
labs(title = "Ratio Values According to Population", x='Population', y='Value by Ratio Variable')
# Subset for Ratio Variables and Scores + melting
#scores.demographics = subset(happiness.data,
#select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop', 'World.Share'))
ggplot(scores.ratios.melt, aes(x = log(Population.2020), y = value), las = 2) +
geom_point(aes(color = value > 0.8), title = "Score Range") +
facet_wrap(~ variable) +
labs(title = "Ratio Values According to Population", x='Population', y='Value by Ratio Variable')
# Subset for Ratio Variables and Scores + melting
#scores.demographics = subset(happiness.data,
#select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop', 'World.Share'))
ggplot(scores.ratios.melt, aes(x = log(Population.2020), y = value), las = 2) +
geom_point(aes(color = value > 0.8)) +
facet_wrap(~ variable) +
labs(title = "Ratio Values According to Population", x='Population', y='Value by Ratio Variable')
GDP.subset = subset(scores.ratios.melt, variable = "GDP.per.capita")
View(GDP.subset)
GDP.subset = subset(scores.ratios.melt, variable === "GDP.per.capita")
GDP.subset = subset(scores.ratios.melt, variable = "GDP.per.capita")
GDP.subset = subset(scores.ratios.melt, variable == "GDP.per.capita")
happiness.data = read.csv(file = 'HappinessData2019.csv', header=TRUE)
# Changing some column names
names(happiness.data)[10] = 'Population.2020'
names(happiness.data)[11] = 'Population.density'
names(happiness.data)[12] = 'Migrants.net'
names(happiness.data)[13] = 'Urban.pop'
summary(happiness.data)
happiness.data = read.csv(file = 'HappinessData2019.csv', header=TRUE)
# Changing some column names
names(happiness.data)[10] = 'Population.2020'
names(happiness.data)[11] = 'Population.density'
names(happiness.data)[12] = 'Migrants.net'
names(happiness.data)[13] = 'Urban.pop'
data.frame(summary(happiness.data))
happiness.data = read.csv(file = 'HappinessData2019.csv', header=TRUE)
# Changing some column names
names(happiness.data)[10] = 'Population.2020'
names(happiness.data)[11] = 'Population.density'
names(happiness.data)[12] = 'Migrants.net'
names(happiness.data)[13] = 'Urban.pop'
# Renaming
# Subset for Ratio Variables and Scores + melting
scores.ratios = happiness.data[,3:10]
scores.ratios.melt = melt(scores.ratios, measure.vars = names(scores.ratios)[2:7])
#ggplot(data = scores.melt, mapping=aes(sample=Score)) + stat_qq(dist='qunif') + facet_wrap(~ variable) + stat_qq(data=scores.melt["Score"], mapping=aes(sample=Score), dist='qunif', geom='line') + labs(title = "Test qplot", x='Scores', y='Scores by Ratio Variable')
ggplot(scores.ratios.melt, aes(x = Score, y = value), las = 2) +
geom_point(aes(color = value > 0.8)) +
facet_wrap(~ variable) +
labs(title = "Ratio Values According to Happiness Score", x='Scores', y='Value by Ratio Variable')
# Subset for Ratio Variables and Scores + melting
#scores.demographics = subset(happiness.data,
#select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop', 'World.Share'))
ggplot(scores.ratios.melt, aes(x = log(Population.2020), y = value), las = 2) +
geom_point(aes(color = value > 0.8)) +
facet_wrap(~ variable) +
labs(title = "Ratio Values According to Population", x='Population', y='Value by Ratio Variable')
GDP.subset = subset(scores.ratios.melt, variable == "GDP.per.capita")
mean(GDP.subset$value)
View(happiness.data)
GDP.subset = subset(scores.ratios.melt, variable == "GDP.per.capita")
social.support.subset = subset(scores.ratios.melt, variable == "Social.support")
expectancy.subset = subset(scores.ratios.melt, variable == "Healthy.life.expectancy")
choices.subset = subset(scores.ratios.melt, variable == "Freedom.to.make.life.choices")
generosity.subset = subset(scores.ratios.melt, variable == "Generosity")
corruption.subset = subset(scores.ratios.melt, variable == "Perceptions.of.corruption")
GDP.subset = subset(scores.ratios.melt, variable == "GDP.per.capita")
social.support.subset = subset(scores.ratios.melt, variable == "Social.support")
expectancy.subset = subset(scores.ratios.melt, variable == "Healthy.life.expectancy")
choices.subset = subset(scores.ratios.melt, variable == "Freedom.to.make.life.choices")
generosity.subset = subset(scores.ratios.melt, variable == "Generosity")
corruption.subset = subset(scores.ratios.melt, variable == "Perceptions.of.corruption")
ddply(scores.ratios.melt, "variable", summarize, avg.ratio = mean(value))
GDP.subset = subset(scores.ratios.melt, variable == "GDP.per.capita")
social.support.subset = subset(scores.ratios.melt, variable == "Social.support")
expectancy.subset = subset(scores.ratios.melt, variable == "Healthy.life.expectancy")
choices.subset = subset(scores.ratios.melt, variable == "Freedom.to.make.life.choices")
generosity.subset = subset(scores.ratios.melt, variable == "Generosity")
corruption.subset = subset(scores.ratios.melt, variable == "Perceptions.of.corruption")
ddply(scores.ratios.melt, "variable", summarize, avg.ratio = mean(value))
mean(GDP.subset)
GDP.subset = subset(scores.ratios.melt, variable == "GDP.per.capita")
social.support.subset = subset(scores.ratios.melt, variable == "Social.support")
expectancy.subset = subset(scores.ratios.melt, variable == "Healthy.life.expectancy")
choices.subset = subset(scores.ratios.melt, variable == "Freedom.to.make.life.choices")
generosity.subset = subset(scores.ratios.melt, variable == "Generosity")
corruption.subset = subset(scores.ratios.melt, variable == "Perceptions.of.corruption")
ddply(scores.ratios.melt, "variable", summarize, avg.ratio = mean(value))
mean(GDP.subset$value)
ddply(scores.ratios.melt, "variable", summarize, avg.ratio = mean(value))
ddply(scores.ratios.melt, "variable", summarize, avg.ratio = mean(value), Score = Score)
ddply(scores.ratios.melt, "variable", summarize, avg.ratio = mean(value))
ddply(scores.ratios.melt, "variable", summarize, avg.ratio = mean(value), avg.score = mean(Score))
ddply(scores.ratios.melt, "variable", summarize, avg.ratio = mean(value))

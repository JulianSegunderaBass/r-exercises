complete.data = happiness.data[ complete.cases(happiness.data), ]
min(complete.data$Population.2020)
max(complete.data$Population.2020)
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
ddply(complete.data, "Population.2020", summarize, count = length(Population.2020))
complete.data = happiness.data[ complete.cases(happiness.data), ]
min(complete.data$Population.2020)
max(complete.data$Population.2020)
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
complete.data = happiness.data[ complete.cases(happiness.data), ]
min(complete.data$Population.2020)
max(complete.data$Population.2020)
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
ddply(complete.data, "Population.2020", summarize, count = length(Population.2020))
complete.data = happiness.data[ complete.cases(happiness.data), ]
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
min(complete.data$Population.2020)
max(complete.data$Population.2020)
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
ddply(complete.data, "Population.2020", summarize, count = length(Population.2020))
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
ddply(complete.data, "Population.2020", summarize, count = length(Population.2020))
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
View(scores.demographics)
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:5])
View(scores.demographics.melt)
View(scores.demographics.melt)
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:5])
ggplot(data=scores.demographics.melt, mapping=aes(x = variable, y=value, color=variable)) +
geom_violin() +
geom_point(position=position_jitter(width=.3), size=.6) +
theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1)) +
scale_color_discrete(guide=FALSE) +
labs(x = 'Variables', y='Values', title='Ratio Variable Values by Melting')
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:5])
ggplot(data=scores.demographics.melt, mapping=aes(x = variable, y=value, color=variable)) +
geom_point(position=position_jitter(width=.3), size=.6) +
theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1)) +
scale_color_discrete(guide=FALSE) +
labs(x = 'Variables', y='Values', title='Ratio Variable Values by Melting')
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:5])
ggplot(data=scores.demographics.melt, mapping=aes(x = value, y=variable, color=variable)) +
geom_point(position=position_jitter(width=.3), size=.6) +
theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1)) +
scale_color_discrete(guide=FALSE) +
labs(x = 'Variables', y='Values', title='Ratio Variable Values by Melting')
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:5])
ggplot(data=scores.demographics.melt, mapping=aes(x = value, y=variable, color=variable)) +
geom_bar(position=position_jitter(width=.3), size=.6) +
theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1)) +
scale_color_discrete(guide=FALSE) +
labs(x = 'Variables', y='Values', title='Ratio Variable Values by Melting')
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:5])
ggplot(data=scores.demographics.melt, mapping=aes(x = value, y=variable, color=variable)) +
geom_bar() +
theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1)) +
scale_color_discrete(guide=FALSE) +
labs(x = 'Variables', y='Values', title='Ratio Variable Values by Melting')
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:5])
ggplot(data=scores.demographics.melt, mapping=aes(x = value, y=variable, color=variable)) +
geom_line(position=position_jitter(width=.3), size=.6) +
theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1)) +
scale_color_discrete(guide=FALSE) +
labs(x = 'Variables', y='Values', title='Ratio Variable Values by Melting')
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:5])
ggplot(data=scores.demographics.melt, mapping=aes(x = variable, y=value, color=variable)) +
geom_line(position=position_jitter(width=.3), size=.6) +
theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1)) +
scale_color_discrete(guide=FALSE) +
labs(x = 'Variables', y='Values', title='Ratio Variable Values by Melting')
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:5])
ggplot(scores.demographics.melt, aes(x = variable, y = value)) +
geom_point(aes(color = variable, size = 0.5) +
facet_wrap(~ variable, nrow = 2) +
labs(title = "Film Ratings by Year Sliced Before and After 1930")
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:5])
ggplot(scores.demographics.melt, aes(x = variable, y = value)) +
geom_point(aes(color = variable, size = 0.5) +
facet_wrap(~ variable, nrow = 2) +
labs(title = "Film Ratings by Year Sliced Before and After 1930")
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:5])
ggplot(scores.demographics.melt, aes(x = variable, y = value)) +
geom_point(aes(color = variable, size = 0.5) +
facet_wrap(~ variable) +
labs(title = "Film Ratings by Year Sliced Before and After 1930")
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:5])
ggplot(scores.demographics.melt, aes(x = variable, y = value)) +
geom_point(size = 0.5) +
facet_wrap(~ variable) +
labs(title = "Film Ratings by Year Sliced Before and After 1930")
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:5])
ggplot(scores.demographics.melt, aes(x = variable, y = value)) +
geom_point(size = 0.5) +
facet_wrap(~ variable) +
labs(title = "Film Ratings by Year Sliced Before and After 1930") +
theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1))
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:5])
ggplot(scores.demographics.melt, aes(x = variable, y = value)) +
geom_bar() +
facet_wrap(~ variable) +
labs(title = "Film Ratings by Year Sliced Before and After 1930") +
theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1))
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:5])
ggplot(scores.demographics.melt, aes(x = variable, y = value)) +
geom_point() +
facet_wrap(~ variable) +
labs(title = "Film Ratings by Year Sliced Before and After 1930") +
theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1))
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:5])
ggplot(data = scores.demographics.melt, mapping = aes(x = variable, y = length(value), fill = variable)) + stat_summary(fun = length, geom="area", position="stack")
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:5])
ggplot(data = scores.demographics, mapping = aes(x = Population.2020, y = Score, fill = len(Score))) + stat_summary(fun = length, geom="area", position="stack")
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:5])
ggplot(data = scores.demographics, mapping = aes(x = Population.2020, y = Score, fill = length(Score))) + stat_summary(fun = length, geom="area", position="stack")
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:5])
ggplot(data = scores.demographics.melt, mapping = aes(x = variable, y = length(value)))
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:5])
ggplot(data = scores.demographics.melt, mapping = aes(x = variable, y = length(value), fill = genre)) + stat_summary(fun = length, geom="area", position="stack")
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:5])
ggplot(data = scores.demographics.melt, mapping = aes(x = variable, y = length(value), fill = variable)) + stat_summary(fun = length, geom="area", position="stack")
# Getting complete records
complete.data = happiness.data[ complete.cases(happiness.data), ]
# Converting Urban.pop column percentage to decimal
complete.data$Urban.pop <- as.numeric(sub("%", "",complete.data$Urban.pop,fixed=TRUE))/100
# Categories for Population
complete.data$Population.2020 = cut_number(complete.data$Population.2020, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Population Density
complete.data$Population.density = cut_number(complete.data$Population.density, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Migrant Counts
complete.data$Migrants.net = cut_number(complete.data$Migrants.net, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Categories for Urban Population Percentage
complete.data$Urban.pop = cut_number(complete.data$Urban.pop, n = 4, labels = c('Class 1 - (Low)', 'Class 2 - (Medium)', 'Class 3 - (High)', 'Class 4 - (Very High)'))
# Subset for just the demographic data
scores.demographics = subset(complete.data,
select=c('Score', 'Population.2020', 'Population.density', 'Migrants.net', 'Urban.pop'))
# Melting into one column
scores.demographics.melt = melt(scores.demographics, measure.vars = names(scores.demographics)[2:5])
ggplot(data = scores.demographics.melt, mapping = aes(x = variable, y = length(value))) + stat_summary(fun = length, geom="area", position="stack")
